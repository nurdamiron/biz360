import { z as zod } from 'zod';
import { useState } from 'react';
import { useForm } from 'react-hook-form';
import { useBoolean } from 'minimal-shared/hooks';
import { zodResolver } from '@hookform/resolvers/zod';

import Box from '@mui/material/Box';
import Link from '@mui/material/Link';
import Alert from '@mui/material/Alert';
import IconButton from '@mui/material/IconButton';
import LoadingButton from '@mui/lab/LoadingButton';
import InputAdornment from '@mui/material/InputAdornment';

import { paths } from 'src/routes/paths';
import { useRouter } from 'src/routes/hooks';
import { RouterLink } from 'src/routes/components';
import { Iconify } from 'src/components/iconify';
import { Form, Field } from 'src/components/hook-form';
import { useAuthContext } from '../../hooks';
import { FormHead } from '../../components/form-head';
import axios from 'src/lib/axios';

// Constants
const JWT_ACCESS_KEY = 'jwt_access_token';
const JWT_REFRESH_KEY = 'refresh_token';

// Token utilities
const tokenUtils = {
  getAccessToken() {
    return localStorage.getItem(JWT_ACCESS_KEY);
  },

  getRefreshToken() {
    return localStorage.getItem(JWT_REFRESH_KEY);
  },

  setAccessToken(token) {
    if (token) {
      localStorage.setItem(JWT_ACCESS_KEY, token);
      axios.defaults.headers.common.Authorization = `Bearer ${token}`;
    }
  },

  setRefreshToken(token) {
    if (token) {
      localStorage.setItem(JWT_REFRESH_KEY, token);
    }
  },

  clearTokens() {
    localStorage.removeItem(JWT_ACCESS_KEY);
    localStorage.removeItem(JWT_REFRESH_KEY);
    delete axios.defaults.headers.common.Authorization;
  },

  jwtDecode(token) {
    if (!token) return null;
    try {
      const base64Url = token.split('.')[1];
      const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
      return JSON.parse(window.atob(base64));
    } catch (error) {
      console.error('Token decode error:', error);
      return null;
    }
  },

  isValidToken(token) {
    if (!token) {
      console.log('Token is missing.');
      return false;
    }
  
    const decoded = this.jwtDecode(token);
    if (!decoded) {
      console.log('Failed to decode token');
      return false;
    }
  
    if (!decoded.exp) {
      console.log('Token does not contain "exp" field.');
      return false;
    }
  
    const currentTime = Date.now() / 1000;
    const isValid = decoded.exp > currentTime;
    const timeLeft = decoded.exp - currentTime;
    
    console.log(`Token valid: ${isValid}, expires in: ${Math.round(timeLeft)} seconds`);
    return isValid;
  },
  
  // –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π API URL –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
  getApiUrl() {
    return window.location.hostname === 'localhost' 
      ? 'http://localhost:5000' 
      : 'https://biz360-backend.onrender.com';
  },

  // –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–∫–µ–Ω—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Ö –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
  saveAndValidateTokens(accessToken, refreshToken) {
    if (!accessToken) {
      console.error('Access token is missing');
      throw new Error('Access token is missing');
    }
    
    console.log('Saving tokens - Access token:', accessToken.substring(0, 15) + '...');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã
    this.setAccessToken(accessToken);
    if (refreshToken) {
      this.setRefreshToken(refreshToken);
    }
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å Access Token
      const isValid = this.isValidToken(accessToken);
      if (!isValid) {
        console.warn('Received invalid access token, clearing tokens');
        this.clearTokens();
        throw new Error('Invalid access token received');
      }
      
      return isValid;
    } catch (error) {
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏, –≤—Å–µ —Ä–∞–≤–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
      // –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç —Å–∏—Å—Ç–µ–º–µ —Ä–∞–±–æ—Ç–∞—Ç—å, –¥–∞–∂–µ –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞ –∏–∑–º–µ–Ω–∏—Ç—Å—è
      console.warn('Token validation error but proceeding anyway:', error.message);
      return true;
    }
  },

  async refreshToken() {
    try {
      const refreshTokenValue = this.getRefreshToken();
      if (!refreshTokenValue) throw new Error('No refresh token found');

      const API_URL = this.getApiUrl();
      console.log(`Refreshing token using API URL: ${API_URL}`);

      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 —Å–µ–∫ —Ç–∞–π–º–∞—É—Ç

      const response = await fetch(`${API_URL}/api/auth/refresh-token`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        body: JSON.stringify({ refreshToken: refreshTokenValue }),
        mode: 'cors',
        signal: controller.signal
      });

      clearTimeout(timeoutId);

      if (!response.ok) {
        this.clearTokens();
        throw new Error(`Failed to refresh token: ${response.status}`);
      }

      const data = await response.json();
      if (!data.data || !data.data.accessToken) {
        throw new Error('Invalid refresh token response format');
      }
      
      const { accessToken } = data.data;
      this.saveAndValidateTokens(accessToken, null);
      return accessToken;
    } catch (error) {
      console.error('Error refreshing token:', error);
      this.clearTokens();
      throw error;
    }
  }
};

// Schema validation
export const SignInSchema = zod.object({
  email: zod.string().min(1, { message: '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!' }),
  password: zod.string().min(1, { message: '–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω!' })
});

// Auth service
const authService = {
  async signInWithPassword({ email, password }) {
    try {
      console.log('üöÄ Attempting login...');
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º centralized API URL
      const API_URL = tokenUtils.getApiUrl();
      console.log(`Using API URL: ${API_URL}`);
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏
      const MAX_RETRIES = 2;
      let retryCount = 0;
      let loginError;
      
      while (retryCount <= MAX_RETRIES) {
        try {
          const controller = new AbortController();
          const timeoutId = setTimeout(() => controller.abort(), 15000); // 15 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
          
          const response = await fetch(`${API_URL}/api/auth/login`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Accept': 'application/json'
            },
            body: JSON.stringify({ email, password }),
            mode: 'cors',
            signal: controller.signal
          });
          
          clearTimeout(timeoutId);
          
          const data = await response.json().catch(() => ({}));
          console.log('üì¶ Response status:', response.status, 'data:', data);
          
          // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
          if (response.ok) {
            // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–æ–¥ –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞ - –Ω–æ–≤—ã–π —Å data.data –∏ —Å—Ç–∞—Ä—ã–π –ø—Ä—è–º–æ–π —Ñ–æ—Ä–º–∞—Ç
            if (data.data && data.data.accessToken && data.data.refreshToken) {
              // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å data.data
              const { accessToken, refreshToken, user } = data.data;
              tokenUtils.saveAndValidateTokens(accessToken, refreshToken);
              
              console.log('‚úÖ Login successful, tokens saved (new format)');
              return { ...data.data, user: { ...user, accessToken } };
            } else if (data.access && data.refresh && data.user) {
              // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –ø—Ä—è–º—ã–º–∏ –ø–æ–ª—è–º–∏
              const { access, refresh, user } = data;
              tokenUtils.saveAndValidateTokens(access, refresh);
              
              console.log('‚úÖ Login successful, tokens saved (legacy format)');
              return { 
                accessToken: access, 
                refreshToken: refresh, 
                user: { ...user, accessToken: access } 
              };
            } else {
              console.error('Invalid response format:', data);
              throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
            }
          }
          
          // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ—É–¥–∞—á–µ–Ω, —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
          let errorMessage = `–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ (${response.status})`;
          
          if (data.error) {
            errorMessage = data.error;
          } else if (data.message) {
            errorMessage = data.message;
          } else if (response.status === 401) {
            errorMessage = '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ';
          } else if (response.status === 403) {
            errorMessage = '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω';
          } else if (response.status === 500) {
            errorMessage = '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ';
          }
          
          loginError = new Error(errorMessage);
        } catch (error) {
          console.error(`–ü–æ–ø—ã—Ç–∫–∞ ${retryCount + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å:`, error);
          loginError = error;
          
          // –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          if (error.name === 'AbortError') {
            loginError = new Error('–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.');
          }
        }
        
        retryCount++;
        if (retryCount <= MAX_RETRIES) {
          console.log(`–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ ${retryCount}...`);
          await new Promise(resolve => setTimeout(resolve, 1000 * retryCount)); // –£–≤–µ–ª–∏—á–∏–≤–∞—é—â–∞—è—Å—è –∑–∞–¥–µ—Ä–∂–∫–∞
        }
      }
      
      // –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –æ—à–∏–±–∫—É
      throw loginError || new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫');
    } catch (error) {
      console.error('‚ùå Login error:', error);
      tokenUtils.clearTokens();
      throw error;
    }
  }
};

// Setup axios interceptors for token refresh
let isRefreshing = false;
let failedQueue = [];

const processQueue = (error, token = null) => {
  failedQueue.forEach(prom => {
    if (error) {
      prom.reject(error);
    } else {
      prom.resolve(token);
    }
  });
  failedQueue = [];
};

axios.interceptors.response.use(
  (response) => response,
  async (error) => {
    const originalRequest = error.config;

    if (error.response?.status !== 401 || originalRequest._retry) {
      return Promise.reject(error);
    }

    if (!isRefreshing) {
      isRefreshing = true;
      originalRequest._retry = true;

      try {
        const newToken = await tokenUtils.refreshToken();
        processQueue(null, newToken);
        originalRequest.headers.Authorization = `Bearer ${newToken}`;
        return axios(originalRequest);
      } catch (refreshError) {
        processQueue(refreshError, null);
        tokenUtils.clearTokens();
        window.location.href = paths.auth.jwt.signIn;
        return Promise.reject(refreshError);
      } finally {
        isRefreshing = false;
      }
    }

    return new Promise((resolve, reject) => {
      failedQueue.push({ resolve, reject });
    });
  }
);

export function JwtSignInView() {
  const router = useRouter();
  const showPassword = useBoolean();
  const { checkEmployeeSession } = useAuthContext();
  const [errorMessage, setErrorMessage] = useState('');

  const defaultValues = {
    email: '',
    password: ''
  };

  const methods = useForm({
    resolver: zodResolver(SignInSchema),
    defaultValues,
  });

  const {
    handleSubmit,
    formState: { isSubmitting },
  } = methods;

  const onSubmit = handleSubmit(async (data) => {
    try {
      setErrorMessage(''); // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—à–∏–±–∫–∏
      console.log('üìù Starting login process...');
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ø—ã—Ç–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
      console.time('login');
      const result = await authService.signInWithPassword({
        email: data.email,
        password: data.password,
      });
      console.timeEnd('login');
      
      console.log('Login result:', result);
      
      // –ó–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –ø–∞—É–∑—É –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
      await new Promise(resolve => setTimeout(resolve, 100));
      
      console.log('üîÑ Checking employee session...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const sessionValid = await checkEmployeeSession?.();
      console.log('Session check result:', sessionValid);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ result –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
      const role = result?.user?.role || result?.user?.employee?.role || 'sales';
      const department = result?.user?.department || 'sales';
      
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –¥–∞—à–±–æ—Ä–¥ –±–µ–∑ —Ö—ç—à–µ–π –≤ URL
      // –í–∞–∂–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º window.location.href –≤–º–µ—Å—Ç–æ router.replace
      // –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ü–∏–∫–ª–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
      console.log(`Redirecting to dashboard root: ${paths.dashboard.root}`);
      window.location.href = paths.dashboard.root;
    } catch (error) {
      console.error('‚ùå Login failed:', error);
      setErrorMessage(error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ');
    }
  });

  const renderForm = () => (
    <Box sx={{ gap: 3, display: 'flex', flexDirection: 'column' }}>
      <Field.Text 
        name="email" 
        label="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        slotProps={{ inputLabel: { shrink: true } }}
      />

      <Box sx={{ gap: 1.5, display: 'flex', flexDirection: 'column' }}>
        <Link
          component={RouterLink}
          href={paths.auth.jwt.forgotPassword}
          variant="body2"
          color="inherit"
          sx={{ alignSelf: 'flex-end' }}
        >
          –ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?
        </Link>

        <Field.Text
          name="password"
          label="–ü–∞—Ä–æ–ª—å"
          type={showPassword.value ? 'text' : 'password'}
          slotProps={{
            inputLabel: { shrink: true },
            input: {
              endAdornment: (
                <InputAdornment position="end">
                  <IconButton onClick={showPassword.onToggle} edge="end">
                    <Iconify
                      icon={showPassword.value ? 'solar:eye-bold' : 'solar:eye-closed-bold'}
                    />
                  </IconButton>
                </InputAdornment>
              ),
            },
          }}
        />
      </Box>

      <LoadingButton
        fullWidth
        color="inherit"
        size="large"
        type="submit"
        variant="contained"
        loading={isSubmitting}
        loadingIndicator="–í—Ö–æ–¥..."
        sx={{
          height: 48,
          position: 'relative',
          '&.MuiLoadingButton-loading': {
            backgroundColor: 'action.selected'
          }
        }}
      >
        –í–æ–π—Ç–∏
      </LoadingButton>
    </Box>
  );

  return (
    <>
      <FormHead
        title="–í—Ö–æ–¥ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"
        description={
          <>
            –£ –≤–∞—Å –Ω–µ—Ç —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏?{' '}
            <Link component={RouterLink} href={paths.auth.jwt.signUp} variant="subtitle2">
              –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å
            </Link>
          </>
        }
        sx={{ textAlign: { xs: 'center', md: 'left' } }}
      />

      {errorMessage && (
        <Alert severity="error" sx={{ mb: 3 }}>
          {errorMessage}
        </Alert>
      )}

      <Form methods={methods} onSubmit={onSubmit}>
        {renderForm()}
      </Form>
    </>
  );
}