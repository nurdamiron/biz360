// src/sections/sales/components/sales-plans/SalesPlanDashboard.jsx
import PropTypes from 'prop-types';
import { useState } from 'react';
import {
  Box,
  Card,
  Grid,
  Tabs,
  Tab,
  Typography,
  Stack,
  Divider,
  LinearProgress,
  Chip,
  alpha,
  Button,
  useTheme,
  IconButton
} from '@mui/material';
import { fCurrency, fPercent } from 'src/utils/format-number';

// –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –∏–∫–æ–Ω–æ–∫
const Icons = {
  Calendar: 'üìÖ',
  Week: 'üìÜ',
  Month: 'üìÖ',
  Success: '‚úì',
  Warning: '‚ö†Ô∏è',
  Error: '‚ùå',
  Phone: 'üìû',
  Money: 'üí∞',
  Target: 'üéØ',
  Person: 'üë•',
  Chart: 'üìä',
  Edit: '‚úèÔ∏è',
  Refresh: 'üîÑ',
  Download: 'üì•',
  BonusMoney: 'üí∏'
};

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º
 */
const ProgressWithLabels = ({ current, target, title, valuePrefix = '', valueSuffix = '', ...props }) => {
  const theme = useTheme();
  const progress = Math.min((current / target) * 100, 100);
  
  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  const getProgressColor = (percent) => {
    if (percent >= 100) return theme.palette.success.main;
    if (percent >= 70) return theme.palette.primary.main;
    if (percent >= 50) return theme.palette.warning.main;
    return theme.palette.error.main;
  };
  
  const progressColor = getProgressColor(progress);
  
  return (
    <Box sx={{ width: '100%', ...props.sx }}>
      <Stack direction="row" justifyContent="space-between" alignItems="center" sx={{ mb: 0.5 }}>
        <Typography variant="body2" color="text.secondary">
          {title}
        </Typography>
        <Typography variant="body2" fontWeight="medium">
          {valuePrefix}{current}{valueSuffix} –∏–∑ {valuePrefix}{target}{valueSuffix} ({Math.round(progress)}%)
        </Typography>
      </Stack>
      <LinearProgress
        variant="determinate"
        value={progress}
        sx={{
          height: 8,
          borderRadius: 2,
          bgcolor: alpha(progressColor, 0.1),
          '& .MuiLinearProgress-bar': {
            borderRadius: 2,
            bgcolor: progressColor
          }
        }}
      />
    </Box>
  );
};

ProgressWithLabels.propTypes = {
  current: PropTypes.number.isRequired,
  target: PropTypes.number.isRequired,
  title: PropTypes.string.isRequired,
  valuePrefix: PropTypes.string,
  valueSuffix: PropTypes.string,
  sx: PropTypes.object
};

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –ø—Ä–æ–¥–∞–∂
 */
const DailyPlanCard = ({ dailyPlan }) => {
  const theme = useTheme();
  
  return (
    <Card sx={{ 
      p: 3, 
      height: '100%',
      borderRadius: 2,
      boxShadow: theme.customShadows?.z8 || '0 8px 16px 0 rgba(145, 158, 171, 0.16)'
    }}>
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
        <Stack direction="row" alignItems="center" spacing={1}>
          <Box
            sx={{
              width: 40,
              height: 40,
              borderRadius: '50%',
              bgcolor: alpha(theme.palette.primary.main, 0.1),
              color: theme.palette.primary.main,
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              fontSize: '1.25rem'
            }}
          >
            {Icons.Calendar}
          </Box>
          <Box>
            <Typography variant="h6">–°–µ–≥–æ–¥–Ω—è</Typography>
            <Typography variant="body2" color="text.secondary">
              {dailyPlan.date}
            </Typography>
          </Box>
        </Stack>
        
        <Chip
          label={
            dailyPlan.salesActual >= dailyPlan.salesTarget
              ? "–ü–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω"
              : dailyPlan.salesActual >= dailyPlan.salesTarget * 0.7
              ? "–í –ø—Ä–æ—Ü–µ—Å—Å–µ"
              : "–û—Ç—Å—Ç–∞–≤–∞–Ω–∏–µ"
          }
          color={
            dailyPlan.salesActual >= dailyPlan.salesTarget
              ? "success"
              : dailyPlan.salesActual >= dailyPlan.salesTarget * 0.7
              ? "primary"
              : "error"
          }
          sx={{ fontWeight: 'bold' }}
        />
      </Box>
      
      <Stack spacing={3}>
        <ProgressWithLabels
          current={dailyPlan.salesActual}
          target={dailyPlan.salesTarget}
          title="–ü—Ä–æ–¥–∞–∂–∏"
          valuePrefix="‚Ç∏ "
        />
        
        <ProgressWithLabels
          current={dailyPlan.callsMade}
          target={dailyPlan.callsTarget}
          title="–ó–≤–æ–Ω–∫–∏"
        />
        
        <ProgressWithLabels
          current={dailyPlan.meetingsHeld}
          target={dailyPlan.meetingsTarget}
          title="–í—Å—Ç—Ä–µ—á–∏"
        />
        
        <ProgressWithLabels
          current={dailyPlan.leadsProcessed}
          target={dailyPlan.leadsToProcessTarget}
          title="–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏–¥–æ–≤"
        />
      </Stack>
      
      <Button
        variant="outlined"
        startIcon={Icons.Refresh}
        fullWidth
        sx={{ mt: 3 }}
      >
        –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
      </Button>
    </Card>
  );
};

DailyPlanCard.propTypes = {
  dailyPlan: PropTypes.object.isRequired
};

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –ø—Ä–æ–¥–∞–∂
 */
const WeeklyPlanCard = ({ weeklyPlan }) => {
  const theme = useTheme();
  
  return (
    <Card sx={{ 
      p: 3, 
      height: '100%',
      borderRadius: 2,
      boxShadow: theme.customShadows?.z8 || '0 8px 16px 0 rgba(145, 158, 171, 0.16)'
    }}>
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
        <Stack direction="row" alignItems="center" spacing={1}>
          <Box
            sx={{
              width: 40,
              height: 40,
              borderRadius: '50%',
              bgcolor: alpha(theme.palette.info.main, 0.1),
              color: theme.palette.info.main,
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              fontSize: '1.25rem'
            }}
          >
            {Icons.Week}
          </Box>
          <Box>
            <Typography variant="h6">–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è</Typography>
            <Typography variant="body2" color="text.secondary">
              {weeklyPlan.startDate} - {weeklyPlan.endDate}
            </Typography>
          </Box>
        </Stack>
        
        <Typography variant="caption" color="text.secondary">
          –ù–µ–¥–µ–ª—è {weeklyPlan.weekNumber}
        </Typography>
      </Box>
      
      <Stack spacing={3}>
        <ProgressWithLabels
          current={weeklyPlan.salesActual}
          target={weeklyPlan.salesTarget}
          title="–ü—Ä–æ–¥–∞–∂–∏"
          valuePrefix="‚Ç∏ "
        />
        
        <ProgressWithLabels
          current={weeklyPlan.callsMade}
          target={weeklyPlan.callsTarget}
          title="–ó–≤–æ–Ω–∫–∏"
        />
        
        <ProgressWithLabels
          current={weeklyPlan.meetingsHeld}
          target={weeklyPlan.meetingsTarget}
          title="–í—Å—Ç—Ä–µ—á–∏"
        />
        
        <ProgressWithLabels
          current={weeklyPlan.leadsProcessed}
          target={weeklyPlan.leadsToProcessTarget}
          title="–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏–¥–æ–≤"
        />
        
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
          <Typography variant="body2" color="text.secondary">
            –ö–æ–Ω–≤–µ—Ä—Å–∏—è:
          </Typography>
          <Chip
            label={`${weeklyPlan.actualConversion}%`}
            color={
              weeklyPlan.actualConversion >= weeklyPlan.conversionTarget
                ? "success"
                : weeklyPlan.actualConversion >= weeklyPlan.conversionTarget * 0.8
                ? "primary"
                : "warning"
            }
            size="small"
            variant="outlined"
          />
        </Box>
      </Stack>
    </Card>
  );
};

WeeklyPlanCard.propTypes = {
  weeklyPlan: PropTypes.object.isRequired
};

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –ø—Ä–æ–¥–∞–∂
 */
const MonthlyPlanCard = ({ monthlyPlan }) => {
  const theme = useTheme();
  
  return (
    <Card sx={{ 
      p: 3, 
      height: '100%',
      borderRadius: 2,
      boxShadow: theme.customShadows?.z8 || '0 8px 16px 0 rgba(145, 158, 171, 0.16)'
    }}>
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
        <Stack direction="row" alignItems="center" spacing={1}>
          <Box
            sx={{
              width: 40,
              height: 40,
              borderRadius: '50%',
              bgcolor: alpha(theme.palette.success.main, 0.1),
              color: theme.palette.success.main,
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              fontSize: '1.25rem'
            }}
          >
            {Icons.Month}
          </Box>
          <Box>
            <Typography variant="h6">–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü</Typography>
            <Typography variant="body2" color="text.secondary">
              {monthlyPlan.month}
            </Typography>
          </Box>
        </Stack>
        
        <IconButton size="small" color="primary">
          {Icons.Edit}
        </IconButton>
      </Box>
      
      <Stack spacing={3}>
        <ProgressWithLabels
          current={monthlyPlan.salesActual}
          target={monthlyPlan.salesTarget}
          title="–ü—Ä–æ–¥–∞–∂–∏"
          valuePrefix="‚Ç∏ "
        />
        
        <ProgressWithLabels
          current={monthlyPlan.callsMade}
          target={monthlyPlan.callsTarget}
          title="–ó–≤–æ–Ω–∫–∏"
        />
        
        <ProgressWithLabels
          current={monthlyPlan.meetingsHeld}
          target={monthlyPlan.meetingsTarget}
          title="–í—Å—Ç—Ä–µ—á–∏"
        />
        
        <ProgressWithLabels
          current={monthlyPlan.leadsProcessed}
          target={monthlyPlan.leadsToProcessTarget}
          title="–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏–¥–æ–≤"
        />
        
        <Box sx={{ 
          p: 2, 
          borderRadius: 2, 
          bgcolor: alpha(theme.palette.primary.main, 0.05),
          border: `1px solid ${alpha(theme.palette.primary.main, 0.1)}`
        }}>
          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>
            <Typography variant="subtitle2">
              <Box component="span" sx={{ mr: 1 }}>{Icons.BonusMoney}</Box>
              –ë–æ–Ω—É—Å—ã
            </Typography>
            <Chip
              label={`${Math.round((monthlyPlan.bonusActual / monthlyPlan.bonusTarget) * 100)}%`}
              color={
                monthlyPlan.bonusActual >= monthlyPlan.bonusTarget
                  ? "success"
                  : monthlyPlan.bonusActual >= monthlyPlan.bonusTarget * 0.7
                  ? "primary"
                  : "warning"
              }
              size="small"
            />
          </Box>
          
          <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 0.5 }}>
            <Typography variant="body2" color="text.secondary">
              –¢–µ–∫—É—â–∏–µ –±–æ–Ω—É—Å—ã:
            </Typography>
            <Typography variant="body2" fontWeight="bold" color="success.main">
              {fCurrency(monthlyPlan.bonusActual)}
            </Typography>
          </Box>
          
          <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>
            <Typography variant="body2" color="text.secondary">
              –¶–µ–ª–µ–≤—ã–µ –±–æ–Ω—É—Å—ã:
            </Typography>
            <Typography variant="body2" fontWeight="medium">
              {fCurrency(monthlyPlan.bonusTarget)}
            </Typography>
          </Box>
        </Box>
        
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
          <Typography variant="body2" color="text.secondary">
            –ö–æ–Ω–≤–µ—Ä—Å–∏—è:
          </Typography>
          <Chip
            label={`${monthlyPlan.actualConversion}%`}
            color={
              monthlyPlan.actualConversion >= monthlyPlan.conversionTarget
                ? "success"
                : monthlyPlan.actualConversion >= monthlyPlan.conversionTarget * 0.8
                ? "primary"
                : "warning"
            }
            size="small"
            variant="outlined"
          />
        </Box>
      </Stack>
      
      <Button
        variant="contained"
        startIcon={Icons.Download}
        fullWidth
        sx={{ mt: 3 }}
      >
        –û—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü
      </Button>
    </Card>
  );
};

MonthlyPlanCard.propTypes = {
  monthlyPlan: PropTypes.object.isRequired
};

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–∞–Ω–µ–ª–∏ –ø–ª–∞–Ω–æ–≤ –ø—Ä–æ–¥–∞–∂
 */
const SalesPlanDashboard = ({ salesPlans }) => {
  const [activeTab, setActiveTab] = useState(0);
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏
  const handleTabChange = (event, newValue) => {
    setActiveTab(newValue);
  };
  
  return (
    <Box>
      <Box sx={{ mb: 3 }}>
        <Tabs value={activeTab} onChange={handleTabChange}>
          <Tab
            label="–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–ª–∞–Ω"
            icon={Icons.Calendar}
            iconPosition="start"
          />
          <Tab
            label="–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –ø–ª–∞–Ω"
            icon={Icons.Week}
            iconPosition="start"
          />
          <Tab
            label="–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞–Ω"
            icon={Icons.Month}
            iconPosition="start"
          />
        </Tabs>
      </Box>
      
      <Grid container spacing={3}>
        {/* –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–ª–∞–Ω */}
        {activeTab === 0 && (
          <Grid item xs={12}>
            <DailyPlanCard dailyPlan={salesPlans.daily} />
          </Grid>
        )}
        
        {/* –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –ø–ª–∞–Ω */}
        {activeTab === 1 && (
          <Grid item xs={12}>
            <WeeklyPlanCard weeklyPlan={salesPlans.weekly} />
          </Grid>
        )}
        
        {/* –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞–Ω */}
        {activeTab === 2 && (
          <Grid item xs={12}>
            <MonthlyPlanCard monthlyPlan={salesPlans.monthly} />
          </Grid>
        )}
      </Grid>
    </Box>
  );
};

SalesPlanDashboard.propTypes = {
  salesPlans: PropTypes.object.isRequired
};

export default SalesPlanDashboard;