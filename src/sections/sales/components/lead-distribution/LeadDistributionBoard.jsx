// src/sections/sales/components/lead-distribution/LeadDistributionBoard.jsx
import { useState, useEffect, useCallback, useMemo } from 'react';
import PropTypes from 'prop-types';
import { DragDropContext } from 'react-beautiful-dnd';
import {
  Box,
  Card,
  Grid,
  Stack,
  Button,
  Typography,
  CardHeader,
  Chip,
  CircularProgress,
  useMediaQuery,
  Snackbar,
  Alert
} from '@mui/material';
import { useTheme } from '@mui/material/styles';
import { motion } from 'framer-motion';

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–∏–¥–∞–º–∏
import { 
  leadDistributionService, 
  assignLead, 
  autoAssignLeads 
} from './leadDistributionService';

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
import UnassignedLeadsColumn from './UnassignedLeadsColumn';
import EmployeeColumn from './EmployeeColumn';
import DistributionStats from './DistributionStats';
import FilterDialog from './FilterDialog';
import AutoAssignSettingsDialog from './AutoAssignSettingsDialog';
import AddLeadDialog from './AddLeadDialog';

// –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –∏–∫–æ–Ω–æ–∫
const Icons = {
  Add: '‚ûï',
  Filter: 'üîç',
  AutoAssign: 'üîÑ',
  Refresh: 'üîÑ',
};

// –ê–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è framer-motion
const containerVariants = {
  hidden: { opacity: 0 },
  visible: {
    opacity: 1,
    transition: {
      staggerChildren: 0.1
    }
  }
};

const itemVariants = {
  hidden: { y: 20, opacity: 0 },
  visible: {
    y: 0,
    opacity: 1,
    transition: {
      type: 'spring',
      stiffness: 300,
      damping: 24
    }
  }
};

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–æ—Å–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ª–∏–¥–æ–≤
 */
export default function LeadDistributionBoard({ onRefreshData }) {
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  const isTablet = useMediaQuery(theme.breakpoints.down('lg'));
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
  const [employees, setEmployees] = useState([]);
  const [leads, setLeads] = useState([]);
  const [stats, setStats] = useState(null);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ UI
  const [isLoading, setIsLoading] = useState(true);
  const [isAutoAssigning, setIsAutoAssigning] = useState(false);
  const [error, setError] = useState(null);
  const [successMessage, setSuccessMessage] = useState(null);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤
  const [filtersOpen, setFiltersOpen] = useState(false);
  const [autoAssignSettingsOpen, setAutoAssignSettingsOpen] = useState(false);
  const [addLeadDialogOpen, setAddLeadDialogOpen] = useState(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const [filters, setFilters] = useState({
    priority: 'all',
    minAmount: '',
    maxAmount: '',
    source: 'all'
  });
  
  const [autoAssignSettings, setAutoAssignSettings] = useState({
    priorityFirst: true,
    balanceLoad: true,
    considerExperience: true,
    maxLeadsPerEmployee: ''
  });
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  const fetchData = useCallback(async () => {
    try {
      setIsLoading(true);
      setError(null);
      
      // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏ –ª–∏–¥–æ–≤
      const employeeData = await leadDistributionService.fetchEmployees(true);
      const leadData = await leadDistributionService.fetchLeads(true);
      
      // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      const statsData = await leadDistributionService.getDistributionStats();
      
      setEmployees(employeeData);
      setLeads(leadData);
      setStats(statsData);
    } catch (err) {
      console.error('Error fetching data:', error);
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: ' + error.message);
    } finally {
      setIsLoading(false);
    }
  }, []);
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    fetchData();
  }, [fetchData]);
  
  // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const filteredLeads = useMemo(() => leads.filter(lead => {
    // –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    if (filters.priority !== 'all' && lead.priority !== filters.priority) {
      return false;
    }
    
    // –§–∏–ª—å—Ç—Ä –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫—É
    if (filters.source !== 'all' && lead.source !== filters.source) {
      return false;
    }
    
    // –§–∏–ª—å—Ç—Ä –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º–µ —Å–¥–µ–ª–∫–∏
    if (filters.minAmount && lead.potential_amount < Number(filters.minAmount)) {
      return false;
    }
    
    // –§–∏–ª—å—Ç—Ä –ø–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º–µ —Å–¥–µ–ª–∫–∏
    if (filters.maxAmount && lead.potential_amount > Number(filters.maxAmount)) {
      return false;
    }
    
    return true;
  }), [leads, filters]);
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–¥–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
  const getEmployeeLeads = useCallback((employeeId) => 
    filteredLeads.filter(lead => lead.assigned_to === employeeId),
  [filteredLeads]);
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –ª–∏–¥–æ–≤
  const unassignedLeads = useMemo(() => 
    filteredLeads.filter(lead => !lead.assigned_to),
  [filteredLeads]);
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
  const handleDragEnd = useCallback(async (result) => {
    const { source, destination, draggableId } = result;
    
    // –ï—Å–ª–∏ –Ω–µ—Ç —Ü–µ–ª–µ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–ª–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –≤ —Ç–æ—Ç –∂–µ —Å–ø–∏—Å–æ–∫ –∏ –ø–æ–∑–∏—Ü–∏—é
    if (!destination || (source.droppableId === destination.droppableId && source.index === destination.index)) {
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º ID –ª–∏–¥–∞ –∏–∑ draggableId (—Ñ–æ—Ä–º–∞—Ç "lead-123")
    const leadId = parseInt(draggableId.split('-')[1], 10);
    
    // –ü–æ–ª—É—á–∞–µ–º ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ destination.droppableId (—Ñ–æ—Ä–º–∞—Ç "employee-123")
    const employeeId = destination.droppableId === 'unassigned' 
      ? null 
      : parseInt(destination.droppableId.split('-')[1], 10);
    
    try {
      // –í—ã–∑—ã–≤–∞–µ–º API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
      const updatedLead = await assignLead(leadId, employeeId);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setLeads(prevLeads => 
        prevLeads.map(lead => lead.id === leadId ? updatedLead : lead)
      );
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const statsData = await leadDistributionService.getDistributionStats();
      setStats(statsData);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
      const leadName = leads.find(lead => lead.id === leadId)?.name || `–õ–∏–¥ #${leadId}`;
      const employeeName = employeeId 
        ? employees.find(emp => emp.id === employeeId)?.name || `–°–æ—Ç—Ä—É–¥–Ω–∏–∫ #${employeeId}`
        : '–Ω–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ';
      
      setSuccessMessage(`${leadName} –ø–µ—Ä–µ–º–µ—â–µ–Ω –∫ ${employeeName}`);
    } catch (err) {
      console.error('Error assigning lead:', error);
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –ª–∏–¥–∞: ' + error.message);
    }
  }, [leads, employees]);
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
  const handleAutoAssign = useCallback(async (settings) => {
    try {
      setIsAutoAssigning(true);
      setError(null);
      
      // –í—ã–∑—ã–≤–∞–µ–º API –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
      const updatedLeads = await autoAssignLeads(settings);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setLeads(updatedLeads);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const statsData = await leadDistributionService.getDistributionStats();
      setStats(statsData);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
      setSuccessMessage('–õ–∏–¥—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã');
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–µ–∫
      setAutoAssignSettingsOpen(false);
    } catch (err) {
      console.error('Error auto-assigning leads:', error);
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏: ' + error.message);
    } finally {
      setIsAutoAssigning(false);
    }
  }, []);
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ª–∏–¥–∞
  const handleAddLead = useCallback(async (leadData) => {
    try {
      setIsLoading(true);
      setError(null);
      
      // –í—ã–∑—ã–≤–∞–µ–º API –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ª–∏–¥–∞
      const newLead = await leadDistributionService.addLead(leadData);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setLeads(prevLeads => [...prevLeads, newLead]);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const statsData = await leadDistributionService.getDistributionStats();
      setStats(statsData);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
      setSuccessMessage(`–ù–æ–≤—ã–π –ª–∏–¥ "${newLead.name}" –¥–æ–±–∞–≤–ª–µ–Ω`);
    } catch (err) {
      console.error('Error adding lead:', error);
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ª–∏–¥–∞: ' + error.message);
    } finally {
      setIsLoading(false);
    }
  }, []);
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
  const handleRefreshData = useCallback(async () => {
    await fetchData();
    
    if (onRefreshData) {
      onRefreshData();
    }
    
    setSuccessMessage('–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
  }, [fetchData, onRefreshData]);
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const handleApplyFilters = useCallback((newFilters) => {
    setFilters(newFilters);
  }, []);
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
  const handleApplyAutoAssignSettings = useCallback((newSettings) => {
    setAutoAssignSettings(newSettings);
  }, []);
  
  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
  const renderLoadingState = () => (
    <Box sx={{ width: '100%', py: 4, display: 'flex', justifyContent: 'center' }}>
      <Stack spacing={2} alignItems="center">
        <CircularProgress size={40} />
        <Typography variant="body2" color="text.secondary">
          –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...
        </Typography>
      </Stack>
    </Box>
  );
  
  return (
    <Box sx={{ width: '100%' }}>
      <motion.div
        initial="hidden"
        animate="visible"
        variants={containerVariants}
      >
        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è */}
        <DistributionStats stats={stats} isLoading={isLoading} />
        
        {/* –û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Å –¥–æ—Å–∫–æ–π */}
        <Card
          component={motion.div}
          variants={itemVariants}
          sx={{ 
            borderRadius: 2,
            boxShadow: theme.customShadows?.z8 || '0 8px 16px 0 rgba(145, 158, 171, 0.16)',
            mb: 3,
            overflow: 'hidden'
          }}
        >
          <CardHeader 
            title={
              <Box sx={{ display: 'flex', alignItems: 'center' }}>
                <Typography variant="h6" component="span">
                  –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª–∏–¥–æ–≤
                </Typography>
                <Chip
                  label={`${unassignedLeads.length} –Ω–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö`}
                  color={unassignedLeads.length > 0 ? 'warning' : 'success'}
                  size="small"
                  sx={{ ml: 1 }}
                />
              </Box>
            }
            action={
              <Stack direction="row" spacing={1}>
                <Button
                  variant="outlined"
                  startIcon={Icons.Filter}
                  size="small"
                  onClick={() => setFiltersOpen(true)}
                >
                  –§–∏–ª—å—Ç—Ä—ã
                </Button>
                <Button
                  variant="outlined"
                  startIcon={Icons.Add}
                  size="small"
                  onClick={() => setAddLeadDialogOpen(true)}
                >
                  –ù–æ–≤—ã–π –ª–∏–¥
                </Button>
                <Button
                  variant="outlined"
                  startIcon={Icons.AutoAssign}
                  onClick={() => setAutoAssignSettingsOpen(true)}
                  disabled={isAutoAssigning || unassignedLeads.length === 0}
                  size="small"
                >
                  {isAutoAssigning ? '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ...' : '–ê–≤—Ç–æ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ'}
                </Button>
                <Button
                  variant="outlined"
                  startIcon={Icons.Refresh}
                  onClick={handleRefreshData}
                  disabled={isLoading}
                  size="small"
                >
                  –û–±–Ω–æ–≤–∏—Ç—å
                </Button>
              </Stack>
            }
          />
          
          {isLoading ? (
            renderLoadingState()
          ) : (
            <DragDropContext onDragEnd={handleDragEnd}>
              <Grid container spacing={2} sx={{ p: 2 }}>
                {/* –ö–æ–ª–æ–Ω–∫–∞ –Ω–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –ª–∏–¥–æ–≤ */}
                <Grid item xs={12} md={4} lg={3}>
                  <UnassignedLeadsColumn leads={unassignedLeads} />
                </Grid>
                
                {/* –ö–æ–ª–æ–Ω–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ */}
                {employees.map(employee => (
                  <Grid item xs={12} md={4} lg={3} key={employee.id}>
                    <EmployeeColumn
                      employee={employee}
                      leads={getEmployeeLeads(employee.id)}
                      isDropDisabled={false}
                    />
                  </Grid>
                ))}
                
                {employees.length === 0 && !isLoading && (
                  <Grid item xs={12}>
                    <Box sx={{ p: 4, textAlign: 'center' }}>
                      <Typography variant="body1" color="text.secondary">
                        –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ª–∏–¥–æ–≤
                      </Typography>
                    </Box>
                  </Grid>
                )}
              </Grid>
            </DragDropContext>
          )}
        </Card>
        
        {/* –î–∏–∞–ª–æ–≥–∏ */}
        <FilterDialog
          open={filtersOpen}
          onClose={() => setFiltersOpen(false)}
          filters={filters}
          onApplyFilters={handleApplyFilters}
        />
        
        <AutoAssignSettingsDialog
          open={autoAssignSettingsOpen}
          onClose={() => setAutoAssignSettingsOpen(false)}
          settings={autoAssignSettings}
          onApplySettings={handleApplyAutoAssignSettings}
          onAutoAssign={handleAutoAssign}
        />
        
        <AddLeadDialog
          open={addLeadDialogOpen}
          onClose={() => setAddLeadDialogOpen(false)}
          onAddLead={handleAddLead}
        />
        
        {/* Snackbar –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö –∏ —É—Å–ø–µ—Ö–µ */}
        <Snackbar
          open={!!error}
          autoHideDuration={6000}
          onClose={() => setError(null)}
          anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}
        >
          <Alert onClose={() => setError(null)} severity="error">
            {error}
          </Alert>
        </Snackbar>
        
        <Snackbar
          open={!!successMessage}
          autoHideDuration={4000}
          onClose={() => setSuccessMessage(null)}
          anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}
        >
          <Alert onClose={() => setSuccessMessage(null)} severity="success">
            {successMessage}
          </Alert>
        </Snackbar>
      </motion.div>
    </Box>
  );
}

LeadDistributionBoard.propTypes = {
  onRefreshData: PropTypes.func
};