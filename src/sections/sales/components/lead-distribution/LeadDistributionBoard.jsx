// src/sections/sales/components/lead-distribution/LeadDistributionBoard.jsx
import { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';
import {
  Box,
  Card,
  Grid,
  Paper,
  Stack,
  Button,
  Divider,
  Typography,
  CardHeader,
  CardContent,
  Chip,
  Avatar,
  TextField,
  IconButton,
  Menu,
  MenuItem,
  Tooltip,
  alpha,
  Alert,
  CircularProgress,
  useMediaQuery
} from '@mui/material';
import { useTheme } from '@mui/material/styles';
import { fCurrency } from 'src/utils/format-number';

// –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –∏–∫–æ–Ω–æ–∫
const Icons = {
  Add: '‚ûï',
  Filter: 'üîç',
  Sort: '‚ÜïÔ∏è',
  Settings: '‚öôÔ∏è',
  AutoAssign: 'üîÑ',
  Star: '‚≠ê',
  Info: '‚ÑπÔ∏è',
  Person: 'üë§',
  Money: 'üí∞',
  Time: '‚è±Ô∏è',
  Warning: '‚ö†Ô∏è',
  Success: '‚úÖ',
  Error: '‚ùå',
  EditPencil: '‚úèÔ∏è',
  Company: 'üè¢',
  Phone: 'üìû',
  Email: 'üìß',
  Calendar: 'üìÖ',
  ArrowDown: '‚Üì',
  ArrowUp: '‚Üë',
  DragHandle: '‚ãÆ‚ãÆ',
  MoreVert: '‚ãØ',
  Check: '‚úì',
  Close: '‚úï',
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –ª–∏–¥–∞
const LeadCard = ({ lead, index, isDragging }) => {
  const theme = useTheme();
  const [menuAnchorEl, setMenuAnchorEl] = useState(null);
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
  const getPriorityColor = (priority) => {
    switch(priority) {
      case '–í—ã—Å–æ–∫–∏–π':
        return theme.palette.error.main;
      case '–°—Ä–µ–¥–Ω–∏–π':
        return theme.palette.warning.main;
      case '–ù–∏–∑–∫–∏–π':
        return theme.palette.success.main;
      default:
        return theme.palette.info.main;
    }
  };
  
  const handleMenuOpen = (event) => {
    setMenuAnchorEl(event.currentTarget);
  };
  
  const handleMenuClose = () => {
    setMenuAnchorEl(null);
  };
  
  return (
    <Draggable draggableId={`lead-${lead.id}`} index={index}>
      {(provided) => (
        <Paper
          ref={provided.innerRef}
          {...provided.draggableProps}
          sx={{
            p: 2,
            mb: 2,
            borderRadius: 2,
            boxShadow: theme.shadows[isDragging ? 8 : 1],
            border: `1px solid ${isDragging ? theme.palette.primary.main : theme.palette.divider}`,
            bgcolor: isDragging ? alpha(theme.palette.primary.main, 0.05) : 'background.paper',
            transition: 'all 0.2s ease',
            '&:hover': {
              boxShadow: theme.shadows[3],
              borderColor: alpha(theme.palette.primary.main, 0.3)
            }
          }}
        >
          <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>
            <Box sx={{ display: 'flex', alignItems: 'center' }}>
              <Box
                {...provided.dragHandleProps}
                sx={{ 
                  color: theme.palette.text.secondary,
                  cursor: 'grab',
                  mr: 1,
                  '&:hover': { color: theme.palette.text.primary }
                }}
              >
                {Icons.DragHandle}
              </Box>
              <Typography variant="subtitle2" noWrap sx={{ maxWidth: 180 }}>
                {lead.name}
              </Typography>
            </Box>
            
            <Box sx={{ display: 'flex', alignItems: 'center' }}>
              <Chip
                label={lead.status}
                size="small"
                sx={{
                  height: 22,
                  fontSize: '0.75rem',
                  mr: 0.5,
                  bgcolor: alpha(theme.palette.primary.main, 0.1),
                  color: theme.palette.primary.main
                }}
              />
              <IconButton size="small" onClick={handleMenuOpen}>
                {Icons.MoreVert}
              </IconButton>
            </Box>
          </Box>
          
          <Divider sx={{ my: 1 }} />
          
          <Stack spacing={1} sx={{ mb: 1 }}>
            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
              <Box sx={{ display: 'flex', alignItems: 'center' }}>
                <Box component="span" sx={{ color: theme.palette.text.secondary, mr: 0.5 }}>
                  {Icons.Company}
                </Box>
                <Typography variant="body2" color="text.secondary">
                  –ö–æ–Ω—Ç–∞–∫—Ç:
                </Typography>
              </Box>
              <Typography variant="body2" fontWeight="medium" noWrap sx={{ maxWidth: 150 }}>
                {lead.contact}
              </Typography>
            </Box>
            
            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
              <Box sx={{ display: 'flex', alignItems: 'center' }}>
                <Box component="span" sx={{ color: theme.palette.text.secondary, mr: 0.5 }}>
                  {Icons.Money}
                </Box>
                <Typography variant="body2" color="text.secondary">
                  –ü–æ—Ç–µ–Ω—Ü. —Å—É–º–º–∞:
                </Typography>
              </Box>
              <Typography variant="body2" fontWeight="bold" color="success.main">
                {fCurrency(lead.potential_amount)}
              </Typography>
            </Box>
            
            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
              <Box sx={{ display: 'flex', alignItems: 'center' }}>
                <Box 
                  component="span" 
                  sx={{ 
                    color: getPriorityColor(lead.priority), 
                    mr: 0.5 
                  }}
                >
                  {Icons.Warning}
                </Box>
                <Typography variant="body2" color="text.secondary">
                  –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:
                </Typography>
              </Box>
              <Chip
                label={lead.priority}
                size="small"
                sx={{
                  height: 20,
                  fontSize: '0.75rem',
                  bgcolor: alpha(getPriorityColor(lead.priority), 0.1),
                  color: getPriorityColor(lead.priority)
                }}
              />
            </Box>
          </Stack>
          
          <Divider sx={{ my: 1 }} />
          
          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
            <Tooltip title="–°—Ä–æ–∫ –ø–µ—Ä–≤–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞" arrow>
              <Box sx={{ display: 'flex', alignItems: 'center' }}>
                <Box component="span" sx={{ color: theme.palette.error.main, mr: 0.5 }}>
                  {Icons.Calendar}
                </Box>
                <Typography variant="caption" color="text.secondary">
                  –î–æ {lead.contact_deadline || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
                </Typography>
              </Box>
            </Tooltip>
            
            <Button
              variant="text"
              size="small"
              sx={{ 
                p: 0, 
                minWidth: 'auto', 
                color: theme.palette.primary.main,
                textTransform: 'none'
              }}
            >
              –ü–æ–¥—Ä–æ–±–Ω–µ–µ
            </Button>
          </Box>
          
          <Menu
            anchorEl={menuAnchorEl}
            open={Boolean(menuAnchorEl)}
            onClose={handleMenuClose}
            PaperProps={{
              elevation: 3,
              sx: { width: 200, mt: 1 }
            }}
          >
            <MenuItem onClick={handleMenuClose}>
              <Box component="span" sx={{ mr: 1.5 }}>
                {Icons.Phone}
              </Box>
              –ü–æ–∑–≤–æ–Ω–∏—Ç—å
            </MenuItem>
            
            <MenuItem onClick={handleMenuClose}>
              <Box component="span" sx={{ mr: 1.5 }}>
                {Icons.Email}
              </Box>
              –û—Ç–ø—Ä–∞–≤–∏—Ç—å email
            </MenuItem>
            
            <MenuItem onClick={handleMenuClose}>
              <Box component="span" sx={{ mr: 1.5 }}>
                {Icons.EditPencil}
              </Box>
              –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
            </MenuItem>
            
            <Divider />
            
            <MenuItem 
              onClick={handleMenuClose}
              sx={{ color: theme.palette.error.main }}
            >
              <Box component="span" sx={{ mr: 1.5 }}>
                {Icons.Close}
              </Box>
              –£–¥–∞–ª–∏—Ç—å
            </MenuItem>
          </Menu>
        </Paper>
      )}
    </Draggable>
  );
};

LeadCard.propTypes = {
  lead: PropTypes.object.isRequired,
  index: PropTypes.number.isRequired,
  isDragging: PropTypes.bool
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
const EmployeeColumn = ({ employee, leads, isDropDisabled }) => {
  const theme = useTheme();
  
  // –†–∞—Å—á–µ—Ç –Ω–∞–≥—Ä—É–∑–∫–∏
  const calculatedLoad = leads.length;
  const maxLoad = employee.capacity || 10;
  const loadPercentage = (calculatedLoad / maxLoad) * 100;
  
  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –Ω–∞–≥—Ä—É–∑–∫–∏
  const getLoadColor = (percentage) => {
    if (percentage >= 90) return theme.palette.error.main;
    if (percentage >= 70) return theme.palette.warning.main;
    return theme.palette.success.main;
  };
  
  const loadColor = getLoadColor(loadPercentage);
  
  return (
    <Droppable 
      droppableId={`employee-${employee.id}`} 
      isDropDisabled={isDropDisabled}
    >
      {(provided, snapshot) => (
        <Card
          ref={provided.innerRef}
          {...provided.droppableProps}
          sx={{
            height: '100%',
            display: 'flex',
            flexDirection: 'column',
            borderRadius: 2,
            boxShadow: theme.shadows[1],
            border: `1px solid ${snapshot.isDraggingOver ? theme.palette.primary.main : theme.palette.divider}`,
            bgcolor: snapshot.isDraggingOver ? alpha(theme.palette.primary.main, 0.05) : 'background.paper'
          }}
        >
          <CardHeader
            title={
              <Box sx={{ display: 'flex', alignItems: 'center' }}>
                <Avatar 
                  src={employee.avatar} 
                  alt={employee.name}
                  sx={{ 
                    width: 32, 
                    height: 32, 
                    mr: 1,
                    bgcolor: employee.color || theme.palette.primary.main
                  }}
                >
                  {employee.name.charAt(0)}
                </Avatar>
                <Typography variant="subtitle1" sx={{ fontWeight: 'medium' }}>
                  {employee.name}
                </Typography>
              </Box>
            }
            subheader={
              <Box sx={{ display: 'flex', alignItems: 'center', mt: 0.5 }}>
                <Typography 
                  variant="caption" 
                  color="text.secondary"
                  sx={{ display: 'flex', alignItems: 'center' }}
                >
                  <Box component="span" sx={{ mr: 0.5 }}>
                    {Icons.Person}
                  </Box>
                  {employee.role}
                </Typography>
                <Typography 
                  variant="caption" 
                  sx={{ 
                    ml: 1.5, 
                    display: 'flex', 
                    alignItems: 'center',
                    color: loadColor
                  }}
                >
                  <Box component="span" sx={{ mr: 0.5 }}>
                    {Icons.Info}
                  </Box>
                  –ù–∞–≥—Ä—É–∑–∫–∞: {calculatedLoad}/{maxLoad}
                </Typography>
              </Box>
            }
            sx={{
              p: 2,
              pb: 1,
              '& .MuiCardHeader-action': { m: 0 }
            }}
          />
          
          <Divider />
          
          <CardContent 
            sx={{ 
              flexGrow: 1, 
              p: 2,
              overflowY: 'auto',
              bgcolor: alpha(theme.palette.background.default, 0.5),
              minHeight: 300,
              maxHeight: 500
            }}
          >
            {leads.map((lead, index) => (
              <LeadCard 
                key={lead.id} 
                lead={lead} 
                index={index} 
                isDragging={snapshot.isDraggingOver} 
              />
            ))}
            {provided.placeholder}
            
            {leads.length === 0 && (
              <Box 
                sx={{ 
                  display: 'flex', 
                  flexDirection: 'column',
                  alignItems: 'center',
                  justifyContent: 'center',
                  height: 150,
                  p: 2,
                  borderRadius: 2,
                  border: `1px dashed ${theme.palette.divider}`,
                  bgcolor: 'background.paper',
                  color: 'text.secondary'
                }}
              >
                <Typography variant="body2" textAlign="center" gutterBottom>
                  –ù–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –ª–∏–¥–æ–≤
                </Typography>
                <Typography variant="caption" textAlign="center">
                  –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –ª–∏–¥–æ–≤ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
                </Typography>
              </Box>
            )}
          </CardContent>
        </Card>
      )}
    </Droppable>
  );
};

EmployeeColumn.propTypes = {
  employee: PropTypes.object.isRequired,
  leads: PropTypes.array.isRequired,
  isDropDisabled: PropTypes.bool
};

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–æ—Å–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ª–∏–¥–æ–≤
export default function LeadDistributionBoard({ 
  employees = [], 
  unassignedLeads = [], 
  onLeadAssign, 
  onAutoAssign
}) {
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  const [localEmployees, setLocalEmployees] = useState(employees);
  const [localUnassignedLeads, setLocalUnassignedLeads] = useState(unassignedLeads);
  const [loading, setLoading] = useState(false);
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–æ–ø—Å–æ–≤
  useEffect(() => {
    setLocalEmployees(employees);
    setLocalUnassignedLeads(unassignedLeads);
  }, [employees, unassignedLeads]);
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–¥–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
  const getEmployeeLeads = (employeeId) => 
    localUnassignedLeads.filter(lead => lead.assigned_to === employeeId);
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
  const handleDragEnd = (result) => {
    const { source, destination, draggableId } = result;
    
    // –ï—Å–ª–∏ –Ω–µ—Ç —Ü–µ–ª–µ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–ª–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –≤ —Ç–æ—Ç –∂–µ —Å–ø–∏—Å–æ–∫ –∏ –ø–æ–∑–∏—Ü–∏—é
    if (!destination || (source.droppableId === destination.droppableId && source.index === destination.index)) {
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º ID –ª–∏–¥–∞ –∏–∑ draggableId (—Ñ–æ—Ä–º–∞—Ç "lead-123")
    const leadId = parseInt(draggableId.split('-')[1], 10);
    const lead = localUnassignedLeads.find(l => l.id === leadId);
    
    if (!lead) return;
    
    // –ü–æ–ª—É—á–∞–µ–º ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ destination.droppableId (—Ñ–æ—Ä–º–∞—Ç "employee-123")
    const employeeId = destination.droppableId === 'unassigned' 
      ? null 
      : parseInt(destination.droppableId.split('-')[1], 10);
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –ª–∏–¥–æ–≤
    const updatedLeads = localUnassignedLeads.map(l => 
      l.id === leadId ? { ...l, assigned_to: employeeId } : l
    );
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    setLocalUnassignedLeads(updatedLeads);
    
    // –í—ã–∑—ã–≤–∞–µ–º callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    if (onLeadAssign) {
      onLeadAssign(leadId, employeeId);
    }
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
  const handleAutoAssign = async () => {
    setLoading(true);
    
    try {
      if (onAutoAssign) {
        await onAutoAssign();
      } else {
        // –ï—Å–ª–∏ callback –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –∏–º–∏—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        const availableEmployees = localEmployees.filter(emp => 
          getEmployeeLeads(emp.id).length < (emp.capacity || 10)
        );
        
        if (availableEmployees.length === 0) {
          console.warn('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è');
          return;
        }
        
        // –ü—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –º–µ–∂–¥—É –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏
        const unassigned = localUnassignedLeads.filter(lead => !lead.assigned_to);
        
        const updatedLeads = [...localUnassignedLeads];
        
        unassigned.forEach((lead, index) => {
          const employeeIndex = index % availableEmployees.length;
          const employeeId = availableEmployees[employeeIndex].id;
          
          const leadIndex = updatedLeads.findIndex(l => l.id === lead.id);
          if (leadIndex !== -1) {
            updatedLeads[leadIndex] = { ...updatedLeads[leadIndex], assigned_to: employeeId };
          }
        });
        
        setLocalUnassignedLeads(updatedLeads);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –ª–∏–¥–æ–≤:', error);
    } finally {
      setLoading(false);
    }
  };
  
  return (
    <Card 
      sx={{ 
        borderRadius: 2,
        boxShadow: theme.shadows[8]
      }}
    >
      <CardHeader 
        title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª–∏–¥–æ–≤" 
        subheader={`${localUnassignedLeads.filter(lead => !lead.assigned_to).length} –Ω–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –ª–∏–¥–æ–≤`}
        action={
          <Stack direction="row" spacing={1}>
            <Button
              variant="outlined"
              startIcon={Icons.Filter}
              size="small"
            >
              –§–∏–ª—å—Ç—Ä—ã
            </Button>
            <Button
              variant="contained"
              startIcon={Icons.AutoAssign}
              onClick={handleAutoAssign}
              disabled={loading}
              size="small"
            >
              {loading ? '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ...' : '–ê–≤—Ç–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ'}
            </Button>
          </Stack>
        }
      />
      
      <Divider />
      
      <CardContent sx={{ p: 2 }}>
        <DragDropContext onDragEnd={handleDragEnd}>
          <Grid container spacing={2}>
            {/* –ö–æ–ª–æ–Ω–∫–∞ –Ω–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –ª–∏–¥–æ–≤ */}
            <Grid item xs={12} md={4} lg={3}>
              <Card 
                sx={{ 
                  borderRadius: 2,
                  boxShadow: theme.shadows[1],
                  bgcolor: alpha(theme.palette.warning.main, 0.05),
                  border: `1px solid ${alpha(theme.palette.warning.main, 0.2)}`
                }}
              >
                <CardHeader
                  title={
                    <Box sx={{ display: 'flex', alignItems: 'center' }}>
                      <Box 
                        sx={{ 
                          width: 32, 
                          height: 32, 
                          borderRadius: '50%',
                          bgcolor: alpha(theme.palette.warning.main, 0.1),
                          color: theme.palette.warning.main,
                          display: 'flex',
                          alignItems: 'center',
                          justifyContent: 'center',
                          mr: 1,
                          fontSize: '1.25rem'
                        }}
                      >
                        {Icons.Warning}
                      </Box>
                      <Typography variant="subtitle1" sx={{ fontWeight: 'medium' }}>
                        –ù–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –ª–∏–¥—ã
                      </Typography>
                    </Box>
                  }
                  subheader={
                    <Typography variant="caption" color="text.secondary" sx={{ mt: 0.5 }}>
                      –¢—Ä–µ–±—É—é—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä—É
                    </Typography>
                  }
                  sx={{
                    p: 2,
                    pb: 1,
                    '& .MuiCardHeader-action': { m: 0 }
                  }}
                />
                
                <Divider />
                
                <CardContent 
                  sx={{ 
                    p: 2,
                    overflowY: 'auto',
                    bgcolor: alpha(theme.palette.background.default, 0.5),
                    minHeight: 300,
                    maxHeight: 500
                  }}
                >
                  <Droppable droppableId="unassigned">
                    {(provided, snapshot) => (
                      <Box
                        ref={provided.innerRef}
                        {...provided.droppableProps}
                        sx={{
                          minHeight: 200,
                          borderRadius: 1,
                          bgcolor: snapshot.isDraggingOver ? alpha(theme.palette.warning.main, 0.1) : 'transparent',
                          transition: 'background-color 0.2s ease'
                        }}
                      >
                        {localUnassignedLeads
                          .filter(lead => !lead.assigned_to)
                          .map((lead, index) => (
                            <LeadCard 
                              key={lead.id} 
                              lead={lead} 
                              index={index} 
                              isDragging={snapshot.isDraggingOver}
                            />
                          ))}
                        {provided.placeholder}
                        
                        {localUnassignedLeads.filter(lead => !lead.assigned_to).length === 0 && (
                          <Box 
                            sx={{ 
                              display: 'flex', 
                              flexDirection: 'column',
                              alignItems: 'center',
                              justifyContent: 'center',
                              height: 150,
                              p: 2,
                              borderRadius: 2,
                              border: `1px dashed ${theme.palette.divider}`,
                              bgcolor: 'background.paper',
                              color: 'text.secondary'
                            }}
                          >
                            <Typography variant="body2" textAlign="center" gutterBottom>
                              –í—Å–µ –ª–∏–¥—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã
                            </Typography>
                            <Typography variant="caption" textAlign="center">
                              –ù–µ—Ç –Ω–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –ª–∏–¥–æ–≤ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç
                            </Typography>
                          </Box>
                        )}
                      </Box>
                    )}
                  </Droppable>
                </CardContent>
              </Card>
            </Grid>
            
            {/* –ö–æ–ª–æ–Ω–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ */}
            {localEmployees.map(employee => (
              <Grid item xs={12} md={4} lg={3} key={employee.id}>
                <EmployeeColumn
                  employee={employee}
                  leads={localUnassignedLeads.filter(lead => lead.assigned_to === employee.id)}
                  isDropDisabled={false}
                />
              </Grid>
            ))}
          </Grid>
        </DragDropContext>
      </CardContent>
    </Card>
  );
}

LeadDistributionBoard.propTypes = {
  employees: PropTypes.array,
  unassignedLeads: PropTypes.array,
  onLeadAssign: PropTypes.func,
  onAutoAssign: PropTypes.func
};