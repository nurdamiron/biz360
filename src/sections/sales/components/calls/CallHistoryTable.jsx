// src/sections/sales/components/calls/CallHistoryTable.jsx
import PropTypes from 'prop-types';
import { useState } from 'react';
import {
  Box,
  Card,
  Table,
  TableRow,
  TableBody,
  TableCell,
  TableHead,
  TableContainer,
  TablePagination,
  Typography,
  Chip,
  IconButton,
  Button,
  Stack,
  Divider,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Rating,
  LinearProgress,
  alpha,
  useTheme,
  Menu,
  MenuItem,
  Tooltip,
  Grid
} from '@mui/material';
import { fToNow, fDateTime } from 'src/utils/format-time';

// –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –∏–∫–æ–Ω–æ–∫
const Icons = {
  Call: 'üìû',
  Email: 'üìß',
  Play: '‚ñ∂Ô∏è',
  More: '‚ãØ',
  Info: '‚ÑπÔ∏è',
  Delete: 'üóëÔ∏è',
  Download: 'üì•',
  Robot: 'ü§ñ',
  Edit: '‚úèÔ∏è',
  Add: '‚ûï',
  Close: '‚úï',
  Success: '‚úì',
  Warning: '‚ö†Ô∏è',
  Error: '‚ùå',
  Filter: 'üîç',
  Sort: '‚ÜïÔ∏è',
  Clock: '‚è±Ô∏è',
};

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–≤–æ–Ω–∫–∞
 * @param {number} seconds - –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
 * @returns {string} - –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
 */
const formatDuration = (seconds) => {
  if (seconds < 60) {
    return `${seconds} —Å–µ–∫`;
  } else if (seconds < 3600) {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    return `${minutes} –º–∏–Ω ${remainingSeconds > 0 ? `${remainingSeconds} —Å–µ–∫` : ''}`;
  } else {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    return `${hours} —á ${minutes > 0 ? `${minutes} –º–∏–Ω` : ''}`;
  }
};

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–≤–æ–Ω–∫–µ
 */
const CallDetailsDialog = ({ call, open, onClose }) => {
  const theme = useTheme();
  
  if (!call) return null;
  
  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏
  const getScoreColor = (score) => {
    if (score >= 80) return theme.palette.success.main;
    if (score >= 60) return theme.palette.warning.main;
    return theme.palette.error.main;
  };
  
  // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ 0-100 –≤ —Ä–µ–π—Ç–∏–Ω–≥ 0-5
  const scoreToRating = (score) => score / 20;
  
  return (
    <Dialog
      open={open}
      onClose={onClose}
      maxWidth="md"
      fullWidth
      PaperProps={{
        elevation: 5,
        sx: { borderRadius: 2 }
      }}
    >
      <DialogTitle sx={{ pb: 1 }}>
        <Stack direction="row" justifyContent="space-between" alignItems="center">
          <Typography variant="h6">–î–µ—Ç–∞–ª–∏ –∑–≤–æ–Ω–∫–∞</Typography>
          <IconButton onClick={onClose} size="small">
            {Icons.Close}
          </IconButton>
        </Stack>
      </DialogTitle>
      
      <DialogContent>
        <Grid container spacing={3}>
          {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–≤–æ–Ω–∫–µ */}
          <Grid item xs={12} sm={6}>
            <Stack spacing={2}>
              <Box>
                <Typography variant="subtitle2" gutterBottom>
                  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–≤–æ–Ω–∫–µ
                </Typography>
                <Typography variant="body2" color="text.secondary" gutterBottom>
                  <Box component="span" sx={{ mr: 1 }}>{Icons.Call}</Box>
                  {call.type}, {formatDuration(call.duration)}
                </Typography>
                <Typography variant="body2" color="text.secondary" gutterBottom>
                  <Box component="span" sx={{ mr: 1 }}>{Icons.Clock}</Box>
                  {fDateTime(call.date)}
                </Typography>
                <Typography variant="body2" color="text.secondary">
                  <Box component="span" sx={{ mr: 1 }}>{Icons.Info}</Box>
                  –ö–ª–∏–µ–Ω—Ç: #{call.clientId}
                </Typography>
              </Box>
              
              <Divider />
              
              <Box>
                <Typography variant="subtitle2" gutterBottom>
                  –†–µ–∑—É–ª—å—Ç–∞—Ç
                </Typography>
                <Typography variant="body2">
                  {call.result}
                </Typography>
              </Box>
              
              <Box>
                <Typography variant="subtitle2" gutterBottom>
                  –ó–∞–º–µ—Ç–∫–∏
                </Typography>
                <Typography variant="body2">
                  {call.notes}
                </Typography>
              </Box>
              
              <Button
                variant="outlined"
                startIcon={Icons.Play}
                fullWidth
              >
                –ü—Ä–æ—Å–ª—É—à–∞—Ç—å –∑–∞–ø–∏—Å—å
              </Button>
            </Stack>
          </Grid>
          
          {/* –ê–Ω–∞–ª–∏–∑ –ò–ò */}
          <Grid item xs={12} sm={6}>
            <Box sx={{ 
              border: `1px solid ${alpha(theme.palette.primary.main, 0.2)}`,
              borderRadius: 2,
              p: 2,
              bgcolor: alpha(theme.palette.primary.main, 0.03)
            }}>
              <Stack direction="row" alignItems="center" spacing={1} sx={{ mb: 2 }}>
                <Box sx={{ 
                  width: 32, 
                  height: 32, 
                  borderRadius: '50%', 
                  bgcolor: alpha(theme.palette.primary.main, 0.1),
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  color: theme.palette.primary.main,
                  fontSize: '1.25rem'
                }}>
                  {Icons.Robot}
                </Box>
                <Typography variant="subtitle1">
                  –ê–Ω–∞–ª–∏–∑ –ò–ò
                </Typography>
              </Stack>
              
              <Box sx={{ mb: 3 }}>
                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>
                  <Typography variant="body2" color="text.secondary">
                    –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
                  </Typography>
                  <Typography 
                    variant="body2" 
                    fontWeight="bold"
                    color={getScoreColor(call.aiAnalysis.overallScore)}
                  >
                    {call.aiAnalysis.overallScore}/100
                  </Typography>
                </Box>
                <Rating 
                  value={scoreToRating(call.aiAnalysis.overallScore)} 
                  precision={0.5} 
                  readOnly 
                  sx={{ mb: 1 }}
                />
              </Box>
              
              <Typography variant="subtitle2" gutterBottom>
                –û—Ü–µ–Ω–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
              </Typography>
              
              <Stack spacing={1.5} sx={{ mb: 3 }}>
                {Object.entries(call.aiAnalysis.categories).map(([category, score]) => {
                  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                  const formatCategoryName = (name) => {
                    switch (name) {
                      case 'greeting': return '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ';
                      case 'needsIdentification': return '–í—ã—è–≤–ª–µ–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π';
                      case 'productPresentation': return '–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞';
                      case 'objectionHandling': return '–†–∞–±–æ—Ç–∞ —Å –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è–º–∏';
                      case 'closing': return '–ó–∞–∫—Ä—ã—Ç–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞';
                      default: return name;
                    }
                  };
                  
                  return (
                    <Box key={category}>
                      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 0.5 }}>
                        <Typography variant="body2" color="text.secondary">
                          {formatCategoryName(category)}
                        </Typography>
                        <Typography 
                          variant="body2" 
                          fontWeight="medium"
                          color={getScoreColor(score)}
                        >
                          {score}/100
                        </Typography>
                      </Box>
                      <LinearProgress 
                        variant="determinate" 
                        value={score} 
                        sx={{ 
                          height: 6, 
                          borderRadius: 1,
                          bgcolor: alpha(getScoreColor(score), 0.1),
                          '& .MuiLinearProgress-bar': {
                            borderRadius: 1,
                            bgcolor: getScoreColor(score)
                          }
                        }}
                      />
                    </Box>
                  );
                })}
              </Stack>
              
              <Typography variant="subtitle2" gutterBottom>
                –ö–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã
              </Typography>
              <Stack spacing={1} sx={{ mb: 3 }}>
                {call.aiAnalysis.keyPhrases.map((phrase, index) => (
                  <Box 
                    key={index}
                    sx={{ 
                      p: 1, 
                      borderRadius: 1, 
                      bgcolor: alpha(theme.palette.info.main, 0.05),
                      border: `1px solid ${alpha(theme.palette.info.main, 0.1)}`
                    }}
                  >
                    <Typography variant="body2">
                    &quot;{phrase}&quot;
                    </Typography>
                  </Box>
                ))}
              </Stack>
              
              <Typography variant="subtitle2" gutterBottom>
                –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
              </Typography>
              <Stack spacing={1}>
                {call.aiAnalysis.recommendations.map((rec, index) => (
                  <Box 
                    key={index}
                    sx={{ 
                      p: 1, 
                      borderRadius: 1, 
                      bgcolor: alpha(theme.palette.warning.main, 0.05),
                      border: `1px solid ${alpha(theme.palette.warning.main, 0.1)}`
                    }}
                  >
                    <Typography variant="body2">
                      {rec}
                    </Typography>
                  </Box>
                ))}
              </Stack>
            </Box>
          </Grid>
        </Grid>
      </DialogContent>
      
      <DialogActions sx={{ p: 2 }}>
        <Button onClick={onClose} color="inherit">
          –ó–∞–∫—Ä—ã—Ç—å
        </Button>
        <Button variant="contained" startIcon={Icons.Download}>
          –°–∫–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å
        </Button>
      </DialogActions>
    </Dialog>
  );
};

CallDetailsDialog.propTypes = {
  call: PropTypes.object,
  open: PropTypes.bool.isRequired,
  onClose: PropTypes.func.isRequired
};

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–≤–æ–Ω–∫–æ–≤
 */
const CallHistoryTable = ({ calls, isLoading }) => {
  const theme = useTheme();
  const [page, setPage] = useState(0);
  const [rowsPerPage, setRowsPerPage] = useState(5);
  const [selectedCall, setSelectedCall] = useState(null);
  const [detailsOpen, setDetailsOpen] = useState(false);
  const [anchorEl, setAnchorEl] = useState(null);
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
  const handleChangePage = (event, newPage) => {
    setPage(newPage);
  };
  
  const handleChangeRowsPerPage = (event) => {
    setRowsPerPage(parseInt(event.target.value, 10));
    setPage(0);
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ –¥–µ–π—Å—Ç–≤–∏–π
  const handleMenuClick = (event, call) => {
    setAnchorEl(event.currentTarget);
    setSelectedCall(call);
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é
  const handleMenuClose = () => {
    setAnchorEl(null);
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–≤–æ–Ω–∫–∞
  const handleOpenDetails = () => {
    setDetailsOpen(true);
    handleMenuClose();
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–≤–æ–Ω–∫–∞
  const handleCloseDetails = () => {
    setDetailsOpen(false);
  };
  
  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –ò–ò
  const getScoreColor = (score) => {
    if (score >= 80) return theme.palette.success.main;
    if (score >= 60) return theme.palette.warning.main;
    return theme.palette.error.main;
  };
  
  // –†–∞–∑–±–∏–≤–∫–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
  const paginatedCalls = calls.slice(
    page * rowsPerPage,
    page * rowsPerPage + rowsPerPage
  );
  
  return (
    <Card sx={{ 
      boxShadow: theme.customShadows?.z8 || '0 8px 16px 0 rgba(145, 158, 171, 0.16)',
      borderRadius: 2
    }}>
      <Box sx={{ p: 2, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
        <Typography variant="h6">
          –ò—Å—Ç–æ—Ä–∏—è –∑–≤–æ–Ω–∫–æ–≤
        </Typography>
        
        <Stack direction="row" spacing={1}>
          <Button
            variant="outlined"
            startIcon={Icons.Filter}
            size="small"
          >
            –§–∏–ª—å—Ç—Ä—ã
          </Button>
          
          <Button
            variant="contained"
            startIcon={Icons.Add}
            size="small"
          >
            –î–æ–±–∞–≤–∏—Ç—å –∑–≤–æ–Ω–æ–∫
          </Button>
        </Stack>
      </Box>
      
      <Divider />
      
      <TableContainer>
        <Table>
          <TableHead>
            <TableRow>
              <TableCell>–ö–ª–∏–µ–Ω—Ç</TableCell>
              <TableCell>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è</TableCell>
              <TableCell>–¢–∏–ø</TableCell>
              <TableCell>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</TableCell>
              <TableCell>–†–µ–∑—É–ª—å—Ç–∞—Ç</TableCell>
              <TableCell align="center">–û—Ü–µ–Ω–∫–∞ –ò–ò</TableCell>
              <TableCell align="right">–î–µ–π—Å—Ç–≤–∏—è</TableCell>
            </TableRow>
          </TableHead>
          
          <TableBody>
            {paginatedCalls.map((call) => (
              <TableRow 
                key={call.id}
                hover
                sx={{ '&:hover': { bgcolor: alpha(theme.palette.primary.main, 0.05) } }}
              >
                <TableCell>
                  <Typography variant="body2" fontWeight="medium">
                    #{call.clientId}
                  </Typography>
                </TableCell>
                
                <TableCell>
                  <Typography variant="body2">
                    {fDateTime(call.date)}
                  </Typography>
                  <Typography variant="caption" color="text.secondary">
                    {fToNow(call.date)}
                  </Typography>
                </TableCell>
                
                <TableCell>
                  <Chip
                    icon={<Box component="span">{Icons.Call}</Box>}
                    label={call.type}
                    size="small"
                    sx={{
                      bgcolor: alpha(theme.palette.primary.main, 0.1),
                      color: theme.palette.primary.main,
                      '& .MuiChip-label': { px: 1 }
                    }}
                  />
                </TableCell>
                
                <TableCell>
                  <Typography variant="body2">
                    {formatDuration(call.duration)}
                  </Typography>
                </TableCell>
                
                <TableCell>
                  <Typography variant="body2" noWrap sx={{ maxWidth: 200 }}>
                    {call.result}
                  </Typography>
                </TableCell>
                
                <TableCell align="center">
                  <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
                    <Tooltip title={`${call.aiAnalysis.overallScore}/100`} arrow>
                      <Box
                        sx={{
                          display: 'flex',
                          alignItems: 'center',
                          justifyContent: 'center',
                          width: 36,
                          height: 36,
                          borderRadius: '50%',
                          bgcolor: alpha(getScoreColor(call.aiAnalysis.overallScore), 0.1),
                          color: getScoreColor(call.aiAnalysis.overallScore),
                          fontWeight: 'bold'
                        }}
                      >
                        {call.aiAnalysis.overallScore}
                      </Box>
                    </Tooltip>
                  </Box>
                </TableCell>
                
                <TableCell align="right">
                  <Stack direction="row" spacing={1} justifyContent="flex-end">
                    <IconButton
                      size="small"
                      onClick={() => {
                        setSelectedCall(call);
                        setDetailsOpen(true);
                      }}
                    >
                      {Icons.Info}
                    </IconButton>
                    
                    <IconButton
                      size="small"
                      onClick={(event) => handleMenuClick(event, call)}
                    >
                      {Icons.More}
                    </IconButton>
                  </Stack>
                </TableCell>
              </TableRow>
            ))}
            
            {paginatedCalls.length === 0 && (
              <TableRow>
                <TableCell colSpan={7} align="center" sx={{ py: 3 }}>
                  <Typography variant="body2" color="text.secondary">
                    {isLoading ? '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...' : '–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –∑–≤–æ–Ω–∫–∞—Ö'}
                  </Typography>
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </TableContainer>
      
      <TablePagination
        rowsPerPageOptions={[5, 10, 25]}
        component="div"
        count={calls.length}
        rowsPerPage={rowsPerPage}
        page={page}
        onPageChange={handleChangePage}
        onRowsPerPageChange={handleChangeRowsPerPage}
        labelRowsPerPage="–°—Ç—Ä–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:"
        labelDisplayedRows={({ from, to, count }) => `${from}‚Äì${to} –∏–∑ ${count}`}
      />
      
      {/* –ú–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π */}
      <Menu
        anchorEl={anchorEl}
        open={Boolean(anchorEl)}
        onClose={handleMenuClose}
        PaperProps={{
          elevation: 3,
          sx: { width: 200, mt: 1 }
        }}
      >
        <MenuItem onClick={handleOpenDetails}>
          <Box component="span" sx={{ mr: 1.5 }}>{Icons.Info}</Box>
          –î–µ—Ç–∞–ª–∏
        </MenuItem>
        
        <MenuItem onClick={handleMenuClose}>
          <Box component="span" sx={{ mr: 1.5 }}>{Icons.Play}</Box>
          –ü—Ä–æ—Å–ª—É—à–∞—Ç—å –∑–∞–ø–∏—Å—å
        </MenuItem>
        
        <MenuItem onClick={handleMenuClose}>
          <Box component="span" sx={{ mr: 1.5 }}>{Icons.Download}</Box>
          –°–∫–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å
        </MenuItem>
        
        <Divider />
        
        <MenuItem onClick={handleMenuClose} sx={{ color: theme.palette.error.main }}>
          <Box component="span" sx={{ mr: 1.5 }}>{Icons.Delete}</Box>
          –£–¥–∞–ª–∏—Ç—å
        </MenuItem>
      </Menu>
      
      {/* –î–∏–∞–ª–æ–≥ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–≤–æ–Ω–∫–∞ */}
      <CallDetailsDialog
        call={selectedCall}
        open={detailsOpen}
        onClose={handleCloseDetails}
      />
    </Card>
  );
};

CallHistoryTable.propTypes = {
  calls: PropTypes.array.isRequired,
  isLoading: PropTypes.bool
};

CallHistoryTable.defaultProps = {
  isLoading: false
};

export default CallHistoryTable;