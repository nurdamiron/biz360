// src/sections/sales/components/client-history/ClientHistoryTable.jsx
import PropTypes from 'prop-types';
import { useState, useEffect } from 'react';
import {
  Box,
  Card,
  Table,
  TableRow,
  TableBody,
  TableCell,
  TableHead,
  TableContainer,
  TablePagination,
  Typography,
  Chip,
  Stack,
  IconButton,
  Menu,
  MenuItem,
  Button,
  Tooltip,
  alpha,
  Divider,
  FormControl,
  InputLabel,
  Select,
} from '@mui/material';
import { useTheme } from '@mui/material/styles';
import { fCurrency, fPercent } from 'src/utils/format-number';
import { fDate } from 'src/utils/format-time';

// –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –∏–∫–æ–Ω–æ–∫
const Icons = {
  More: '‚ãØ',
  Phone: 'üìû',
  Email: 'üìß',
  Info: '‚ÑπÔ∏è',
  Edit: '‚úèÔ∏è',
  Delete: 'üóëÔ∏è',
  History: 'üìã',
  Filter: 'üîç',
  Sort: '‚ÜïÔ∏è',
  Add: '‚ûï',
  Star: '‚≠ê',
  VIP: 'üëë',
  New: 'üÜï',
  Regular: 'üîÑ',
  Passive: '‚è∏Ô∏è',
};

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π
 */
const ClientHistoryTable = ({ clients, onViewDetails, onCallClient, onEmailClient, onEditClient }) => {
  const theme = useTheme();
  const [page, setPage] = useState(0);
  const [rowsPerPage, setRowsPerPage] = useState(5);
  const [sortBy, setSortBy] = useState('totalRevenue');
  const [sortOrder, setSortOrder] = useState('desc');
  const [actionMenuAnchor, setActionMenuAnchor] = useState(null);
  const [selectedClient, setSelectedClient] = useState(null);
  const [filterStatus, setFilterStatus] = useState('all');
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞
  const getStatusIcon = (status) => {
    switch (status) {
      case 'VIP':
        return Icons.VIP;
      case '–ù–æ–≤—ã–π':
        return Icons.New;
      case '–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π':
        return Icons.Regular;
      case '–ü–∞—Å—Å–∏–≤–Ω—ã–π':
        return Icons.Passive;
      default:
        return Icons.Info;
    }
  };
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞
  const getStatusColor = (status) => {
    switch (status) {
      case 'VIP':
        return theme.palette.error.main;
      case '–ù–æ–≤—ã–π':
        return theme.palette.info.main;
      case '–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π':
        return theme.palette.success.main;
      case '–ü–∞—Å—Å–∏–≤–Ω—ã–π':
        return theme.palette.warning.main;
      default:
        return theme.palette.grey[500];
    }
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π
  const handleActionMenuClick = (event, client) => {
    setActionMenuAnchor(event.currentTarget);
    setSelectedClient(client);
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π
  const handleActionMenuClose = () => {
    setActionMenuAnchor(null);
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤ –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π
  const handleViewDetails = () => {
    if (selectedClient && onViewDetails) {
      onViewDetails(selectedClient.id);
    }
    handleActionMenuClose();
  };
  
  const handleCallClient = () => {
    if (selectedClient && onCallClient) {
      onCallClient(selectedClient.id);
    }
    handleActionMenuClose();
  };
  
  const handleEmailClient = () => {
    if (selectedClient && onEmailClient) {
      onEmailClient(selectedClient.id);
    }
    handleActionMenuClose();
  };
  
  const handleEditClient = () => {
    if (selectedClient && onEditClient) {
      onEditClient(selectedClient.id);
    }
    handleActionMenuClose();
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
  const handleChangePage = (event, newPage) => {
    setPage(newPage);
  };
  
  const handleChangeRowsPerPage = (event) => {
    setRowsPerPage(parseInt(event.target.value, 10));
    setPage(0);
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
  const handleSortChange = (event) => {
    setSortBy(event.target.value);
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
  const handleSortOrderChange = () => {
    setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc');
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Å—Ç–∞—Ç—É—Å—É
  const handleStatusFilterChange = (event) => {
    setFilterStatus(event.target.value);
  };
  
  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
  const filteredAndSortedClients = [...clients]
    .filter(client => filterStatus === 'all' || client.status === filterStatus)
    .sort((a, b) => {
      let comparison = 0;
      
      // –í—ã–±–æ—Ä –ø–æ–ª—è –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
      switch (sortBy) {
        case 'totalRevenue':
          comparison = a.totalRevenue - b.totalRevenue;
          break;
        case 'averageCheck':
          comparison = a.averageCheck - b.averageCheck;
          break;
        case 'profit':
          comparison = a.profit - b.profit;
          break;
        case 'profitMargin':
          comparison = a.profitMargin - b.profitMargin;
          break;
        case 'transactions':
          comparison = a.transactions.length - b.transactions.length;
          break;
        case 'lastContact':
          comparison = new Date(a.lastContact) - new Date(b.lastContact);
          break;
        default:
          comparison = a.totalRevenue - b.totalRevenue;
      }
      
      // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
      return sortOrder === 'asc' ? comparison : -comparison;
    });
  
  // –†–∞–∑–±–∏–≤–∫–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
  const paginatedClients = filteredAndSortedClients.slice(
    page * rowsPerPage,
    page * rowsPerPage + rowsPerPage
  );
  
  return (
    <Card sx={{ 
      boxShadow: theme.customShadows?.z8 || '0 8px 16px 0 rgba(145, 158, 171, 0.16)',
      borderRadius: 2
    }}>
      <Box sx={{ p: 2, display: 'flex', justifyContent: 'space-between', alignItems: 'center', flexWrap: 'wrap', gap: 2 }}>
        <Typography variant="h6">
          –ò—Å—Ç–æ—Ä–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
        </Typography>
        
        <Stack direction="row" spacing={2}>
          <FormControl size="small" sx={{ minWidth: 150 }}>
            <InputLabel id="status-filter-label">–°—Ç–∞—Ç—É—Å</InputLabel>
            <Select
              labelId="status-filter-label"
              value={filterStatus}
              label="–°—Ç–∞—Ç—É—Å"
              onChange={handleStatusFilterChange}
            >
              <MenuItem value="all">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</MenuItem>
              <MenuItem value="–ù–æ–≤—ã–π">–ù–æ–≤—ã–µ</MenuItem>
              <MenuItem value="–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π">–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ</MenuItem>
              <MenuItem value="–ü–∞—Å—Å–∏–≤–Ω—ã–π">–ü–∞—Å—Å–∏–≤–Ω—ã–µ</MenuItem>
              <MenuItem value="VIP">VIP</MenuItem>
            </Select>
          </FormControl>
          
          <FormControl size="small" sx={{ minWidth: 180 }}>
            <InputLabel id="sort-by-label">–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ</InputLabel>
            <Select
              labelId="sort-by-label"
              value={sortBy}
              label="–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ"
              onChange={handleSortChange}
              endAdornment={
                <IconButton 
                  size="small" 
                  onClick={handleSortOrderChange}
                  sx={{ mr: 1 }}
                >
                  {Icons.Sort}
                </IconButton>
              }
            >
              <MenuItem value="totalRevenue">–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞</MenuItem>
              <MenuItem value="averageCheck">–°—Ä–µ–¥–Ω–∏–π —á–µ–∫</MenuItem>
              <MenuItem value="profit">–ü—Ä–∏–±—ã–ª—å</MenuItem>
              <MenuItem value="profitMargin">–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å</MenuItem>
              <MenuItem value="transactions">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫</MenuItem>
              <MenuItem value="lastContact">–ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–Ω—Ç–∞–∫—Ç</MenuItem>
            </Select>
          </FormControl>
          
          <Button 
            variant="contained" 
            startIcon={Icons.Add}
            size="small"
          >
            –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞
          </Button>
        </Stack>
      </Box>
      
      <Divider />
      
      <TableContainer>
        <Table>
          <TableHead>
            <TableRow>
              <TableCell>–ö–ª–∏–µ–Ω—Ç</TableCell>
              <TableCell>–°—Ç–∞—Ç—É—Å</TableCell>
              <TableCell align="right">–°—Ä–µ–¥–Ω–∏–π —á–µ–∫</TableCell>
              <TableCell align="right">–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞</TableCell>
              <TableCell align="right">–ü—Ä–∏–±—ã–ª—å</TableCell>
              <TableCell align="right">–ú–∞—Ä–∂–∞</TableCell>
              <TableCell align="right">–ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–Ω—Ç–∞–∫—Ç</TableCell>
              <TableCell align="right">–î–µ–π—Å—Ç–≤–∏—è</TableCell>
            </TableRow>
          </TableHead>
          
          <TableBody>
            {paginatedClients.map((client) => (
              <TableRow 
                key={client.id}
                hover
                sx={{ '&:hover': { bgcolor: alpha(theme.palette.primary.main, 0.05) } }}
              >
                <TableCell>
                  <Typography variant="subtitle2" noWrap>
                    {client.name}
                  </Typography>
                  <Typography variant="caption" color="text.secondary">
                    {client.transactions.length} {client.transactions.length === 1 ? '—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è' : '—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏'}
                  </Typography>
                </TableCell>
                
                <TableCell>
                  <Chip
                    icon={<Box component="span">{getStatusIcon(client.status)}</Box>}
                    label={client.status}
                    size="small"
                    sx={{
                      bgcolor: alpha(getStatusColor(client.status), 0.1),
                      color: getStatusColor(client.status),
                      '& .MuiChip-label': { px: 1 }
                    }}
                  />
                </TableCell>
                
                <TableCell align="right">
                  <Typography variant="body2" fontWeight="medium">
                    {fCurrency(client.averageCheck)}
                  </Typography>
                </TableCell>
                
                <TableCell align="right">
                  <Typography variant="body2" fontWeight="medium">
                    {fCurrency(client.totalRevenue)}
                  </Typography>
                </TableCell>
                
                <TableCell align="right">
                  <Typography variant="body2" fontWeight="medium" color="success.main">
                    {fCurrency(client.profit)}
                  </Typography>
                </TableCell>
                
                <TableCell align="right">
                  <Typography 
                    variant="body2" 
                    fontWeight="medium"
                    color={client.profitMargin >= 40 ? 'success.main' : 'warning.main'}
                  >
                    {fPercent(client.profitMargin / 100)}
                  </Typography>
                </TableCell>
                
                <TableCell align="right">
                  <Typography variant="body2">
                    {fDate(client.lastContact)}
                  </Typography>
                </TableCell>
                
                <TableCell align="right">
                  <IconButton 
                    size="small" 
                    onClick={(event) => handleActionMenuClick(event, client)}
                  >
                    {Icons.More}
                  </IconButton>
                </TableCell>
              </TableRow>
            ))}
            
            {paginatedClients.length === 0 && (
              <TableRow>
                <TableCell colSpan={8} align="center" sx={{ py: 3 }}>
                  <Typography variant="body2" color="text.secondary">
                    –ö–ª–∏–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
                  </Typography>
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </TableContainer>
      
      <TablePagination
        rowsPerPageOptions={[5, 10, 25]}
        component="div"
        count={filteredAndSortedClients.length}
        rowsPerPage={rowsPerPage}
        page={page}
        onPageChange={handleChangePage}
        onRowsPerPageChange={handleChangeRowsPerPage}
        labelRowsPerPage="–°—Ç—Ä–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:"
        labelDisplayedRows={({ from, to, count }) => `${from}‚Äì${to} –∏–∑ ${count}`}
      />
      
      {/* –ú–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π */}
      <Menu
        anchorEl={actionMenuAnchor}
        open={Boolean(actionMenuAnchor)}
        onClose={handleActionMenuClose}
        PaperProps={{
          elevation: 3,
          sx: { width: 200, mt: 1 }
        }}
      >
        <MenuItem onClick={handleViewDetails}>
          <Box component="span" sx={{ mr: 1.5 }}>{Icons.Info}</Box>
          –î–µ—Ç–∞–ª–∏
        </MenuItem>
        
        <MenuItem onClick={handleCallClient}>
          <Box component="span" sx={{ mr: 1.5 }}>{Icons.Phone}</Box>
          –ü–æ–∑–≤–æ–Ω–∏—Ç—å
        </MenuItem>
        
        <MenuItem onClick={handleEmailClient}>
          <Box component="span" sx={{ mr: 1.5 }}>{Icons.Email}</Box>
          –ù–∞–ø–∏—Å–∞—Ç—å
        </MenuItem>
        
        <MenuItem onClick={handleEditClient}>
          <Box component="span" sx={{ mr: 1.5 }}>{Icons.Edit}</Box>
          –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        </MenuItem>
        
        <Divider />
        
        <MenuItem onClick={handleActionMenuClose} sx={{ color: theme.palette.error.main }}>
          <Box component="span" sx={{ mr: 1.5 }}>{Icons.Delete}</Box>
          –£–¥–∞–ª–∏—Ç—å
        </MenuItem>
      </Menu>
    </Card>
  );
};

ClientHistoryTable.propTypes = {
  clients: PropTypes.array.isRequired,
  onViewDetails: PropTypes.func,
  onCallClient: PropTypes.func,
  onEmailClient: PropTypes.func,
  onEditClient: PropTypes.func
};

export default ClientHistoryTable;