// src/sections/sales/components/client-history/ClientDetailsCard.jsx
import PropTypes from 'prop-types';
import { useState } from 'react';
import {
  Box,
  Card,
  Grid,
  Stack,
  Divider,
  Typography,
  Tab,
  Tabs,
  Table,
  TableRow,
  TableCell,
  TableHead,
  TableBody,
  Chip,
  Button,
  IconButton,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  alpha,
  useTheme
} from '@mui/material';
import { fCurrency, fPercent } from 'src/utils/format-number';
import { fDate } from 'src/utils/format-time';

// –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –∏–∫–æ–Ω–æ–∫
const Icons = {
  VIP: 'üëë',
  New: 'üÜï',
  Regular: 'üîÑ',
  Passive: '‚è∏Ô∏è',
  Phone: 'üìû',
  Email: 'üìß',
  Calendar: 'üìÖ',
  Edit: '‚úèÔ∏è',
  History: 'üìã',
  Money: 'üí∞',
  Check: '‚úì',
  Close: '‚úï',
  Notes: 'üìù',
  Person: 'üë§',
  Building: 'üè¢',
  Info: '‚ÑπÔ∏è',
  Download: 'üì•',
};

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ
 */
const ClientDetailsCard = ({ client, onClose, open }) => {
  const theme = useTheme();
  const [activeTab, setActiveTab] = useState(0);
  
  if (!client) {
    return null;
  }
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏
  const handleTabChange = (event, newValue) => {
    setActiveTab(newValue);
  };
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞
  const getStatusColor = (status) => {
    switch (status) {
      case 'VIP':
        return theme.palette.error.main;
      case '–ù–æ–≤—ã–π':
        return theme.palette.info.main;
      case '–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π':
        return theme.palette.success.main;
      case '–ü–∞—Å—Å–∏–≤–Ω—ã–π':
        return theme.palette.warning.main;
      default:
        return theme.palette.grey[500];
    }
  };
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
  const getStatusIcon = (status) => {
    switch (status) {
      case 'VIP':
        return Icons.VIP;
      case '–ù–æ–≤—ã–π':
        return Icons.New;
      case '–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π':
        return Icons.Regular;
      case '–ü–∞—Å—Å–∏–≤–Ω—ã–π':
        return Icons.Passive;
      default:
        return Icons.Info;
    }
  };
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  const paidTransactionsCount = client.transactions.filter(t => t.isPaid).length;
  const paidTransactionsPercent = (paidTransactionsCount / client.transactions.length) * 100 || 0;
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—É–º–º—ã –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∏ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  const paidAmount = client.transactions
    .filter(t => t.isPaid)
    .reduce((sum, t) => sum + t.amount, 0);
    
  const unpaidAmount = client.transactions
    .filter(t => !t.isPaid)
    .reduce((sum, t) => sum + t.amount, 0);
  
  return (
    <Dialog
      open={open}
      onClose={onClose}
      maxWidth="md"
      fullWidth
      PaperProps={{
        elevation: 5,
        sx: { borderRadius: 2 }
      }}
    >
      <DialogTitle sx={{ pb: 1 }}>
        <Stack direction="row" justifyContent="space-between" alignItems="center">
          <Typography variant="h6">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ</Typography>
          <IconButton onClick={onClose} size="small">
            {Icons.Close}
          </IconButton>
        </Stack>
      </DialogTitle>
      
      <DialogContent sx={{ pb: 0 }}>
        <Grid container spacing={2}>
          {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ */}
          <Grid item xs={12}>
            <Card 
              sx={{ 
                p: 2, 
                borderRadius: 2,
                mb: 2,
                boxShadow: 'none',
                border: `1px solid ${theme.palette.divider}`
              }}
            >
              <Stack 
                direction={{ xs: 'column', sm: 'row' }} 
                justifyContent="space-between" 
                alignItems={{ xs: 'flex-start', sm: 'center' }}
                spacing={2}
              >
                <Box>
                  <Stack direction="row" alignItems="center" spacing={1} sx={{ mb: 1 }}>
                    <Typography variant="h5">
                      {client.name}
                    </Typography>
                    <Chip
                      icon={<Box component="span">{getStatusIcon(client.status)}</Box>}
                      label={client.status}
                      size="small"
                      sx={{
                        bgcolor: alpha(getStatusColor(client.status), 0.1),
                        color: getStatusColor(client.status),
                        fontWeight: 'bold',
                        '& .MuiChip-label': { px: 1 }
                      }}
                    />
                  </Stack>
                  
                  <Stack direction="row" spacing={3}>
                    <Box sx={{ display: 'flex', alignItems: 'center' }}>
                      <Box component="span" sx={{ mr: 0.5, color: 'text.secondary' }}>
                        {Icons.Calendar}
                      </Box>
                      <Typography variant="body2" color="text.secondary">
                        –ö–ª–∏–µ–Ω—Ç —Å: {fDate(client.firstContactDate)}
                      </Typography>
                    </Box>
                    
                    <Box sx={{ display: 'flex', alignItems: 'center' }}>
                      <Box component="span" sx={{ mr: 0.5, color: 'text.secondary' }}>
                        {Icons.Money}
                      </Box>
                      <Typography variant="body2" color="text.secondary">
                        –í—ã—Ä—É—á–∫–∞: {fCurrency(client.totalRevenue)}
                      </Typography>
                    </Box>
                  </Stack>
                </Box>
                
                <Stack direction="row" spacing={1}>
                  <Button
                    variant="outlined"
                    size="small"
                    startIcon={Icons.Phone}
                  >
                    –ü–æ–∑–≤–æ–Ω–∏—Ç—å
                  </Button>
                  
                  <Button
                    variant="outlined"
                    size="small"
                    startIcon={Icons.Email}
                  >
                    –ù–∞–ø–∏—Å–∞—Ç—å
                  </Button>
                  
                  <Button
                    variant="contained"
                    size="small"
                    startIcon={Icons.Edit}
                  >
                    –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                  </Button>
                </Stack>
              </Stack>
            </Card>
          </Grid>
          
          {/* –í–∫–ª–∞–¥–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π */}
          <Grid item xs={12}>
            <Tabs 
              value={activeTab} 
              onChange={handleTabChange}
              sx={{ mb: 2 }}
            >
              <Tab label="–§–∏–Ω–∞–Ω—Å—ã" />
              <Tab label="–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏" />
              <Tab label="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ" />
            </Tabs>
            
            {/* –í–∫–ª–∞–¥–∫–∞ "–§–∏–Ω–∞–Ω—Å—ã" */}
            {activeTab === 0 && (
              <Grid container spacing={2}>
                <Grid item xs={12} md={6}>
                  <Card 
                    sx={{ 
                      p: 2, 
                      height: '100%',
                      borderRadius: 2,
                      boxShadow: 'none',
                      border: `1px solid ${theme.palette.divider}`
                    }}
                  >
                    <Typography variant="subtitle1" gutterBottom>
                      –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
                    </Typography>
                    <Divider sx={{ mb: 2 }} />
                    
                    <Stack spacing={2}>
                      <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>
                        <Typography variant="body2" color="text.secondary">
                          –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞:
                        </Typography>
                        <Typography variant="body2" fontWeight="bold">
                          {fCurrency(client.totalRevenue)}
                        </Typography>
                      </Box>
                      
                      <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>
                        <Typography variant="body2" color="text.secondary">
                          –°—Ä–µ–¥–Ω–∏–π —á–µ–∫:
                        </Typography>
                        <Typography variant="body2" fontWeight="bold">
                          {fCurrency(client.averageCheck)}
                        </Typography>
                      </Box>
                      
                      <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>
                        <Typography variant="body2" color="text.secondary">
                          –ü—Ä–∏–±—ã–ª—å:
                        </Typography>
                        <Typography variant="body2" fontWeight="bold" color="success.main">
                          {fCurrency(client.profit)}
                        </Typography>
                      </Box>
                      
                      <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>
                        <Typography variant="body2" color="text.secondary">
                          –ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
                        </Typography>
                        <Typography 
                          variant="body2" 
                          fontWeight="bold" 
                          color={client.profitMargin >= 40 ? 'success.main' : 'warning.main'}
                        >
                          {fPercent(client.profitMargin / 100)}
                        </Typography>
                      </Box>
                      
                      <Divider />
                      
                      <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>
                        <Typography variant="body2" color="text.secondary">
                          –û–ø–ª–∞—á–µ–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:
                        </Typography>
                        <Typography variant="body2" fontWeight="bold">
                          {paidTransactionsCount} –∏–∑ {client.transactions.length} ({fPercent(paidTransactionsPercent / 100)})
                        </Typography>
                      </Box>
                      
                      <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>
                        <Typography variant="body2" color="text.secondary">
                          –û–ø–ª–∞—á–µ–Ω–Ω–∞—è —Å—É–º–º–∞:
                        </Typography>
                        <Typography variant="body2" fontWeight="bold" color="success.main">
                          {fCurrency(paidAmount)}
                        </Typography>
                      </Box>
                      
                      <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>
                        <Typography variant="body2" color="text.secondary">
                          –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã:
                        </Typography>
                        <Typography variant="body2" fontWeight="bold" color="warning.main">
                          {fCurrency(unpaidAmount)}
                        </Typography>
                      </Box>
                      
                      <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>
                        <Typography variant="body2" color="text.secondary">
                          –ù–∞—á–∏—Å–ª–µ–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã (5%):
                        </Typography>
                        <Typography variant="body2" fontWeight="bold" color="primary.main">
                          {fCurrency(paidAmount * 0.05)}
                        </Typography>
                      </Box>
                    </Stack>
                  </Card>
                </Grid>
                
                <Grid item xs={12} md={6}>
                  <Card 
                    sx={{ 
                      p: 2, 
                      height: '100%',
                      borderRadius: 2,
                      boxShadow: 'none',
                      border: `1px solid ${theme.palette.divider}`
                    }}
                  >
                    <Typography variant="subtitle1" gutterBottom>
                      –ë–∏–∑–Ω–µ—Å-–ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
                    </Typography>
                    <Divider sx={{ mb: 2 }} />
                    
                    <Stack spacing={2}>
                      <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>
                        <Typography variant="body2" color="text.secondary">
                          –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:
                        </Typography>
                        <Typography variant="body2" fontWeight="bold">
                          {client.transactions.length}
                        </Typography>
                      </Box>
                      
                      <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>
                        <Typography variant="body2" color="text.secondary">
                          –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è:
                        </Typography>
                        <Typography variant="body2" fontWeight="bold">
                          {fDate(client.transactions[client.transactions.length - 1]?.date || client.lastContact)}
                        </Typography>
                      </Box>
                      
                      <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>
                        <Typography variant="body2" color="text.secondary">
                          –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–Ω—Ç–∞–∫—Ç:
                        </Typography>
                        <Typography variant="body2" fontWeight="bold">
                          {fDate(client.lastContact)}
                        </Typography>
                      </Box>
                      
                      <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>
                        <Typography variant="body2" color="text.secondary">
                          –°–ª–µ–¥—É—é—â–∏–π –∫–æ–Ω—Ç–∞–∫—Ç:
                        </Typography>
                        <Typography variant="body2" fontWeight="bold" color="primary.main">
                          {fDate(client.nextContactScheduled)}
                        </Typography>
                      </Box>
                      
                      <Divider />
                      
                      <Box>
                        <Typography variant="body2" color="text.secondary" gutterBottom>
                          –ó–∞–º–µ—Ç–∫–∏:
                        </Typography>
                        <Typography variant="body2">
                          {client.notes || '–ù–µ—Ç –∑–∞–º–µ—Ç–æ–∫'}
                        </Typography>
                      </Box>
                      
                      <Button 
                        variant="outlined" 
                        fullWidth 
                        startIcon={Icons.Notes}
                        sx={{ mt: 2 }}
                      >
                        –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É
                      </Button>
                    </Stack>
                  </Card>
                </Grid>
              </Grid>
            )}
            
            {/* –í–∫–ª–∞–¥–∫–∞ "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏" */}
            {activeTab === 1 && (
              <Card 
                sx={{ 
                  borderRadius: 2,
                  boxShadow: 'none',
                  border: `1px solid ${theme.palette.divider}`
                }}
              >
                <Table>
                  <TableHead>
                    <TableRow>
                      <TableCell>ID</TableCell>
                      <TableCell>–î–∞—Ç–∞</TableCell>
                      <TableCell>–ü—Ä–æ–¥—É–∫—Ç—ã</TableCell>
                      <TableCell align="right">–°—É–º–º–∞</TableCell>
                      <TableCell align="right">–°—Ç–∞—Ç—É—Å</TableCell>
                      <TableCell align="right">–ë–æ–Ω—É—Å (5%)</TableCell>
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {client.transactions.map((transaction) => (
                      <TableRow key={transaction.id}>
                        <TableCell>
                          <Typography variant="body2">
                            #{transaction.id}
                          </Typography>
                        </TableCell>
                        <TableCell>
                          <Typography variant="body2">
                            {fDate(transaction.date)}
                          </Typography>
                        </TableCell>
                        <TableCell>
                          <Typography variant="body2">
                            {transaction.products.join(', ')}
                          </Typography>
                        </TableCell>
                        <TableCell align="right">
                          <Typography variant="body2" fontWeight="medium">
                            {fCurrency(transaction.amount)}
                          </Typography>
                        </TableCell>
                        <TableCell align="right">
                          <Chip
                            label={transaction.isPaid ? '–û–ø–ª–∞—á–µ–Ω' : '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã'}
                            size="small"
                            color={transaction.isPaid ? 'success' : 'warning'}
                            variant="outlined"
                          />
                        </TableCell>
                        <TableCell align="right">
                          <Typography 
                            variant="body2" 
                            fontWeight="medium"
                            color={transaction.isPaid ? 'success.main' : 'text.disabled'}
                          >
                            {transaction.isPaid ? fCurrency(transaction.amount * 0.05) : '‚Äî'}
                          </Typography>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </Card>
            )}
            
            {/* –í–∫–ª–∞–¥–∫–∞ "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ" */}
            {activeTab === 2 && (
              <Grid container spacing={2}>
                <Grid item xs={12}>
                  <Card 
                    sx={{ 
                      p: 2, 
                      borderRadius: 2,
                      boxShadow: 'none',
                      border: `1px solid ${theme.palette.divider}`
                    }}
                  >
                    <Typography variant="subtitle1" gutterBottom>
                      –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                    </Typography>
                    <Divider sx={{ mb: 2 }} />
                    
                    <Typography variant="body2" color="text.secondary" paragraph>
                      –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ, 
                      –≤–∫–ª—é—á–∞—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∏—Å—Ç–æ—Ä–∏—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π –∏ —Ç.–¥.
                    </Typography>
                    
                    <Typography variant="body2" paragraph>
                      <strong>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</strong> –í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ 
                      –∏—Å—Ç–æ—Ä–∏—è –∑–≤–æ–Ω–∫–æ–≤ –∏ –æ—Ü–µ–Ω–∫–∏ –ò–ò, –∫–æ–≥–¥–∞ –º–æ–¥—É–ª—å –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–Ω–µ–¥—Ä–µ–Ω.
                    </Typography>
                    
                    <Button 
                      variant="outlined"
                      startIcon={Icons.History}
                      sx={{ mt: 1 }}
                    >
                      –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–≤–æ–Ω–∫–æ–≤
                    </Button>
                  </Card>
                </Grid>
              </Grid>
            )}
          </Grid>
        </Grid>
      </DialogContent>
      
      <DialogActions sx={{ p: 2 }}>
        <Button onClick={onClose} color="inherit">
          –ó–∞–∫—Ä—ã—Ç—å
        </Button>
        <Button variant="contained" startIcon={Icons.Download}>
          –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
        </Button>
      </DialogActions>
    </Dialog>
  );
};

ClientDetailsCard.propTypes = {
  client: PropTypes.object,
  onClose: PropTypes.func.isRequired,
  open: PropTypes.bool.isRequired
};

export default ClientDetailsCard;